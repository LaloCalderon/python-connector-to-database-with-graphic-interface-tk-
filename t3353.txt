import tkinter
from tkinter import *  # IMPORTAMOS LIBRERÍAS NECESARIAS.
from datetime import datetime
from tkinter import ttk, messagebox, filedialog
import time, MySQLdb, mysql.connector
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Column, Integer, String
from PIL import Image
import os

# MOTOR DE LA BDD, RUTA HASTA MY LOCALHOST
# engine = create_engine("mysql+pymysql://root:313218479@localhost/mydb2",
#                        encoding="utf-8",
#                        echo=True)
# Base = declarative_base()
engine = create_engine("mysql+pymysql://root:313218479@localhost/mydb",
                       encoding="utf-8",
                       echo=True)
Base = declarative_base()


####TABLA DE USUARIOS
class Incidencias(Base):
    __tablename__ = "datos_incidencias2"

    ticket = Column(Integer, primary_key=True)  # Campo ticket
    status = Column(String(20))
    operador = Column(String(50))
    spacecraft = Column(String(15))  # Campo spacecraft
    ccs = Column(String(13))
    tipo_falla = Column(String(15))
    componente = Column(String(40))
    componente2 = Column(String(30))
    device = Column(String(20))
    descripcion = Column(String(400))
    date = Column(String(25))
    hora = Column(String(20))
    files = Column(String(300))
    files2 = Column(String(300))
    files3 = Column(String(300))
    files4 = Column(String(300))
    files5 = Column(String(300))
    files6 = Column(String(300))
    files7 = Column(String(300))
    files8 = Column(String(300))
    files9 = Column(String(300))
    files10 = Column(String(300))

    def __repr__(self):  # Constructor de objetos para mostrar un formato legible
        return "<Incidencias(status='%s', operador='%s', spacecraft='%s', ccs='%s', tipo_falla='%s', componente='%s', componente2='%s', " \
               "device='%s', descripcion='%s', date='%s', hora='%s', files='%s', files2='%s', files3='%s', files4='%s', files5='%s', " \
               "files6='%s', files7='%s', files8='%s', files9='%s', files10='%s')>" % (
                   self.status, self.operador, self.spacecraft, self.ccs, self.tipo_falla, self.componente,
                   self.componente2,
                   self.device, self.descripcion, self.date, self.hora, self.files, self.files2, self.files3,
                   self.files4,
                   self.files5, self.files6, self.files7, self.files8, self.files9, self.files10)


Base.metadata.create_all(engine)  # Crear motor
DBsession = sessionmaker(bind=engine)  # Manejador de sesiones unido a nuestro motor
session = DBsession()  # Asignación a método


class User(Base):  ####TABLA DE USUARIOS
    __tablename__ = "users_table"

    id = Column(Integer, primary_key=True)
    name = Column(String(50))
    password = Column(String(128))
    ccs = Column(String(11))
    dominio = Column(String(40))
    mail = Column(String(70))

    def __repr__(self):  # Mostrar un formato legible
        return "<User(name='%s', password='%s', ccs='%s', dominio='%s',mail='%s')>" % (
            self.name, self.password, self.ccs, self.dominio, self.mail)


result = session.query(User).all
result2 = session.query(Incidencias).all
################################################
data = {  # '': [''],
    'Hardware': ['Servidor', 'WS', 'Switch', 'KVM', 'Teléfono IP', 'Impresora', 'Otro'],
    'No Identificado': [''],
    'Software': ['Iztapalapa Operaciones', 'Iztapalapa Ingeniería', 'Hermosillo Operaciones', 'Hermosillo Ingeniería']
}

data2 = {'Servidor': ["Serv Iztapalapa Operaciones", "Serv Iztapalapa Ingeniería", "Serv Iztapalapa RF",
                      "Serv Hermosillo Operaciones", "Serv Hermosillo Ingeniería", "Serv Hermosillo RF",
                      'Hardware Servidor'],
         'WS': ["WS Iztapalapa Operaciones", "WS Iztpalapa Ingeniería", "WS Hermosillo Operaciones",
                "WS Hermosillo Ingeniería", "Hardware WS"],
         'Switch': ["SW Iztapalapa Operaciones", "SW Iztapalapa Ingeniería", "SW Iztapalapa RF",
                    "SW Hermosillo Operaciones", "SW Hermosillo Ingeniería", "SW Hermosillo RF"],
         'KVM': ["KVM Iztapalapa", "KVM Hermosillo"],
         'Teléfono IP': ["Tel Iztapalapa", "Tel Hermosillo"],
         'Impresora': ["Imp Iztapalapa", "Imp Hermosillo"],
         'Otro': ['Concluir', 'Agregar Info'],

         'Iztapalapa Operaciones': ['Windows', 'Epoch', 'Ares', 'Task Iniator', 'Antivirus', 'Backups', 'Cortex',
                                    'Compass', 'Mónaco', 'Herramientas', 'Otro'],
         'Iztapalapa Ingeniería': ['Windows', 'Epoch', 'Ares', 'DSS MX2', 'DSS MX3', 'Oasys', 'Task Iniator',
                                   'Herramientas', 'Antivirus',
                                   'Backups', 'SureSyns', 'Archive Configuration', 'Monics', 'Complan', 'Otro'],
         'Hermosillo Operaciones': ['Windows', 'Epoch', 'Ares', 'Task Iniator', 'Antivirus', 'Backups', 'Cortex',
                                    'Compass', 'Mónaco', 'Herramientas', 'Otro'],
         'Hermosillo Ingeniería': ['Windows', 'Epoch', 'Ares', 'DSS MX2', 'DSS MX3', 'Oasys', 'Task Iniator',
                                   'Herramientas', 'Antivirus',
                                   'Backups', 'SureSyns', 'Archive Configuration', 'Monics', 'Complan', 'Otro'],
         # '': ['']
         }

data3 = {'Serv Iztapalapa Operaciones': ['izopsfep0', 'izopsfep1', 'izopsfep2', 'izopsfep3', 'izopsgs1', 'izopsgs2',
                                         'izopsmc1', 'izopsmc2'],
         'Serv Iztapalapa Ingeniería': ['izengcds1', 'izengcps1', 'izenggs1', 'izenggs2', 'izengfep1', 'izengarc1',
                                        'izengnas0', 'izengnas1', 'izengnas2', 'izengnas3'],
         'Serv Iztapalapa RF': ['izm3tmc1', 'izm3tmc2', 'mnc_a_mexcity', 'mnc_b_mexcity', 'izm3tbbu1', 'izm3tbbu2',
                                'GPS MX3', 'GPS1 MX2', 'GPS2 MX2',
                                'BBU primario MX2', 'BBU backup MX2'],
         'Serv Hermosillo Operaciones': ['hmopsfep0', 'hmopsfep1', 'hmopsfep2', 'hmopsfep3', 'hmopsgs1', 'hmopsgs2',
                                         'hmopsmc1', 'hmopsmc2'],
         'Serv Hermosillo Ingeniería': ['hmenggs1', 'hmenggs2', 'hmengfep1', 'hmengarc1', 'hmengnas0', 'hmengnas1',
                                        'hmengnas2', 'hmengnas3'],
         'Serv Hermosillo RF': ['hmm3tmc1', 'hmm3tmc2', 'mnc_a_mexcity', 'mnc_b_mexcity', 'hmm3tbbu1', 'hmm3tbbu2',
                                'GPS MX3', 'GPS1 MX2', 'GPS2 MX2',
                                'BBU primario MX2', 'BBU backup MX2', 'hmm3tlns1', 'hmm3tlns2', 'hmm3tris1',
                                'hmm3tris2', 'hmm3tris3'],

         'Hardware Servidor': ['Disco Duro', 'Interfaz de red', 'Tarjeta RAID', 'Ventilador', 'RAM',
                               'Fuente de alimentación'],

         'WS Iztapalapa Operaciones': ['izopsws1', 'izopsws2', 'izopsws3', 'izopsws4', 'izopsws5'],
         'WS Iztpalapa Ingeniería': ['izengws1', 'izengws2', 'izengws3', 'izengws4', 'izengws5', 'izengws6', 'izengws7',
                                     'izengws8', 'izengws9', 'izengdss1', 'izengdss3'],
         'WS Hermosillo Operaciones': ['hmopsws1', 'hmopsws2', 'hmopsws3', 'hmopsws4', 'hmopsws5'],
         'WS Hermosillo Ingeniería': ['hmengws1', 'hmengws2', 'hmengws3', 'hmengws4', 'hmengdss1', 'hmengdss3'],
         'Hardware WS': ['Monitor', 'Tarjeta de video', 'Disco Duro', 'Tarjeta de red', 'Fuente de alimentación',
                         'Teclado', 'Mouse', 'Bocinas'],

         'SW Iztapalapa Operaciones': ['izopssw1', 'izopssw2', 'izopsts1', 'izopsts2'],
         'SW Iztapalapa Ingeniería': ['izengsw1', 'izengsw2'],
         'SW Iztapalapa RF': ['izm3tsw1', 'izm3tsw2', 'izm3tdm1', 'izm3tdm2', 'izMX2 sw1', 'izMX2 sw2', 'izMX2 ts1',
                              'izMX2 ts2'],
         'SW Hermosillo Operaciones': ['hmopssw1', 'hmopssw2', 'hmopsts1', 'hmopsts2'],
         'SW Hermosillo Ingeniería': ['hmengsw1', 'hmengsw2'],
         'SW Hermosillo RF': ['hmm3tsw1', 'hmm3tsw2', 'hmm3tdm1', 'hmm3tdm2', 'hmMX2 sw1', 'hmMX2 sw2', 'hmMX2 ts1',
                              'hmMX2 ts2'],

         'KVM Iztapalapa': ['Operaciones', 'Ingeniería', 'Encriptores', 'MSS', 'FSS'],
         'KVM Hermosillo': ['Operaciones', 'Ingeniería', 'Monics', 'MSS', 'FSS'],

         'Tel Iztapalapa': ['Operaciones', 'Ingeniería', 'Server Room', 'RF'],
         'Tel Hermosillo': ['Operaciones', 'Ingeniería', 'Server Room', 'RF'],

         'Imp Iztapalapa': ['Color', 'Blanco y Negro'],
         'Imp Hermosillo': ['Color', 'Blanco y Negro'],

         'Agregar Info': ['Agregue una breve descripción:'],
         'Concluir': ['Presione Registrar'],

         'Windows': ['No aplica'],
         'Epoch': ['No aplica'],
         'Ares': ['No aplica'],
         'Task Iniator': ['No aplica'],
         'Antivirus': ['No aplica'],
         'Backups': ['No aplica'],
         'Cortex': ['No aplica'],
         'Compass': ['No aplica'],
         'Mónaco': ['No aplica'],
         'Herramientas': ['No aplica'],
         'Otro': ['Ingrese una descripción:'],
         'DSS MX2': ['No aplica'],
         'DSS MX3': ['No aplica'],
         'Oasys': ['No aplica'],
         'SureSyns': ['No aplica'],
         'Archive Configuration': ['No aplica'],
         'Monics': ['No aplica'],
         'Complan': ['No aplica'],
         # '': ['']
         }

data4 = {  # '': [],
    'tipo_falla': ['Software', 'Hardware', 'No Identificado'],
    'componente': ['Teléfono IP', 'Impresora', 'Servidor', 'Switch', 'KVM', 'WS', 'Otro', 'Iztapalapa Operaciones',
                   'Hermosillo Operaciones', 'Iztapalapa Ingeniería', 'Hermosillo Ingeniería',
                   'Windows', 'Epoch', 'Ares', 'Task Iniator', 'Antivirus', 'Backups', 'Cortex', 'Compass',
                   'Mónaco', 'Herramientas'],
    'spacecraft': ['MX2', 'MX3'],
    'operador': ['Ingresa el nombre del operador: '],
    'status': ['Abierto', 'Cerrado'],
    'device': ['Serv Iztapalapa Operaciones', 'Serv Iztapalapa Ingeniería', 'Serv Iztapalapa RF',
               'Serv Hermosillo Operaciones', 'Serv Hermosillo Ingeniería', 'Serv Hermosillo RF',
               'Hardware Servidor'],
    'ticket': ['Ingresa un número: '],
    'date': ['Lunes', 'Martes'],
    'hora': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
    'ccs': ['Iztapalapa', 'Hermosillo']
}

data5 = {'Software': [], 'Hardware': [], 'No Identificado': [], 'Teléfono IP': [], 'Impresora': [], 'Servidor': [],
         'Switch': [], 'KVM': [], 'WS': [], 'Otro': [], 'Iztapalapa Operaciones': [], 'Hermosillo Operaciones': [],
         'Iztapalapa Ingeniería': [], 'Hermosillo Ingeniería': [], 'Windows': [], 'Epoch': [], 'Ares': [],
         'Task Iniator': [], 'Antivirus': [], 'Backups': [], 'Cortex': [], 'Compass': [], 'Mónaco': [],
         'Herramientas': [],
         'MX2': [], 'MX3': [], 'Ingresa el nombre del operador: ': [], 'Abierto': [], 'Cerrado': [],
         'Serv Iztapalapa Operaciones': [], 'Serv Iztapalapa Ingeniería': [], 'Serv Iztapalapa RF': [],
         'Serv Hermosillo Operaciones': [],
         'Serv Hermosillo Ingeniería': [], 'Serv Hermosillo RF': [], 'Hardware Servidor': [], 'Ingresa un número: ': [],
         'Lunes': [], 'Martes': [], '1': [], '2': [], '3': [], '4': [], '5': [], '6': [], '7': [], '8': [], '9': [],
         '10': [],
         '11': [], '12': [], 'Iztapalapa': [], 'Hermosillo': []
         }


def hacia_atrass():
    try:
        ventana_help.state(newstate='withdraw')
        ventana_principal.state(newstate='normal')
        ventana_principal.deiconify()
    except Exception as e:
        ventana_help2.state(newstate='withdraw')
        ventana_registro.state(newstate='normal')
        ventana_registro.deiconify()


def hacia_atrasss():
    try:
        ventana_help3.state(newstate='withdraw')
        ventana_login.state(newstate='normal')
        ventana_login.deiconify()
    except Exception as e:
        ventana_help4.state(newstate='withdraw')
        ventana_viss.state(newstate='normal')
        ventana_viss.deiconify()


def helpp():
    global ventana_help
    ventana_help = Tk()
    ventana_help.resizable(False, False)
    ventana_help.geometry("450x390")
    ventana_help.title("Soporte y ayuda: Ventana Principal")
    ventana_principal.state(newstate='withdraw')
    Label(ventana_help, text="Acceso:", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help, text="Opción para ingresar credenciales previamente registradas para", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help, text="obtener acceso a la interfaz de modificación de registros", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help, text="Registro ", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help, text="Registro de credenciales para poder obtener acceso al sistema", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help, text="Ver tickets:", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help, text="Visualización de registros de incidencia sn posibilidad de edición", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help, text="", width="300", font=("Calibri", 13)).pack()
    Button(ventana_help, text="Cerrar", width="30", command=hacia_atrass).pack()  # BOTÓN "Acceder"
    Label(ventana_help, text="Para cualquier aclaración o reporte comunicarse con:", width="300", anchor="center",
          font=("Calibri", 13)).pack()
    Label(ventana_help, text="jorge.gonzalez.morales@telecomm.gob.mx", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help, text="eduardo.calderonc@sat.gob.mx", width="300", font=("Calibri", 13)).pack()


def helpp1():
    global ventana_help2
    ventana_help2 = Tk()
    ventana_help2.resizable(False, False)
    ventana_help2.geometry("450x440")
    ventana_help2.title("Soporte y ayuda: Ventana de Registro")
    ventana_registro.state(newstate='withdraw')
    Label(ventana_help2, text="Nombre de usuario:", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help2, text="Ingrese su nombre de pila y apellido paterno", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="Contraseña", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help2, text="Debe cumplir con las siguientes características:", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help2, text="   -Longitud mínima de 8 caracteres", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="   -1 Mayúscula y 1 minúscula", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="   -1 número", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="   -1 caracter especial", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="Dominio y CCS", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help2, text="Ingrese alguna de las opciones especificadas", width="300", font=("Calibri", 13)).pack()
    Button(ventana_help2, text="Cerrar", width="30", command=hacia_atrass).pack()
    Label(ventana_help2, text="Para cualquier aclaración o reporte comunicarse con:", width="300", anchor="center",
          font=("Calibri", 13)).pack()
    Label(ventana_help2, text="jorge.gonzalez.morales@telecomm.gob.mx", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help2, text="eduardo.calderonc@sat.gob.mx", width="300",
          font=("Calibri", 13)).pack()  # BOTÓN "Acceder"


def helpp2():
    global ventana_help3
    ventana_help3 = Tk()
    ventana_help3.resizable(False, False)
    ventana_help3.geometry("450x380")
    ventana_help3.title("Soporte y ayuda: Ventana de Logueo")
    ventana_login.state(newstate='withdraw')
    Label(ventana_help3, text="Nombre de usuario:", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help3, text="Ingrese un nombre previamente registrado en esta app", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help3, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help3, text="Contraseña", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help3, text="Ingrese el password asociado a dicha cuenta", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help3, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help3, text="¿olvidó su contraseña?", width="300", anchor="center", font=("Comic Sans MS", 14)).pack()
    Label(ventana_help3, text="Interfaz para recuperación de contraseña proporcionando datos de identificación",
          width="300", font=("Calibri", 13)).pack()
    Label(ventana_help3, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help3, text="Para cualquier aclaración o reporte comunicarse con:", width="300", anchor="center",
          font=("Calibri", 13)).pack()
    Label(ventana_help3, text="jorge.gonzalez.morales@telecomm.gob.mx", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help3, text="eduardo.calderonc@sat.gob.mx", width="300", font=("Calibri", 13)).pack()
    Button(ventana_help3, text="Cerrar", width="30", command=hacia_atrasss).pack()  # BOTÓN "Acceder"


def helpp3():
    global ventana_help4
    ventana_help4 = Tk()
    ventana_help4.resizable(False, False)
    ventana_help4.geometry("460x350")
    ventana_help4.title("Soporte y ayuda: Ventana de Búsqueda y Visualización")
    ventana_viss.state(newstate='withdraw')
    Label(ventana_help4, text="En esta ventana se puede realizar la búsqueda de reportes de ", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help4, text="incidecias y buscar en el catálogo bajo una determinada referencia", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help4, text="existente en la base de datos:", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help4, text="1.- Seleccione un campo de filtrado", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help4, text="2.- Seleccione un componente de filtrado", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help4, text="3.- Presione el botón aplicar", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help4, text="4.- Vuelva a realizar una búsqueda de ser necesario", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help4, text="", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help4, text="Ver histórico = Histórico de una determinada incidencia", width="300",
          font=("Calibri", 13)).pack()
    Button(ventana_help4, text="Cerrar", width="30", command=hacia_atrasss).pack()  # BOTÓN "Acceder"
    Label(ventana_help4, text="Para cualquier aclaración o reporte comunicarse con:", width="300",
          font=("Calibri", 13)).pack()
    Label(ventana_help4, text="jorge.gonzalez.morales@telecomm.gob.mx", width="300", font=("Calibri", 13)).pack()
    Label(ventana_help4, text="eduardo.calderonc@sat.gob.mx", width="300", font=("Calibri", 13)).pack()


def helpp4():
    global ventana_help4
    ventana_help4 = Tk()
    ventana_help4.resizable(False, False)
    ventana_help4.geometry("450x400")
    ventana_help4.title("Soporte y ayuda: Ventana con menú")


def ventana_inicio():
    global ventana_principal, optionmenu_f
    ventana_principal = Tk()
    ventana_principal.resizable(False, False)
    ventana_principal.iconbitmap('tele_ico.ico')
    ventana_principal.geometry("360x280")  # DIMENSIONES DE LA VENTANA bxh
    ventana_principal.title("Sistema de Gestión de incidencias")  # TITULO DE LA VENTANA

    Label(text="Escoja una opción", width="300", font=("Calibri", 13)).pack()  # ETIQUETA CON TEXTO
    Label(text="").pack()

    boton = tkinter.Button(text="Acceso", width="30", command=login, bd=15)  # BOTÓN "Acceder"
    boton.pack()
    Label(text="").pack()

    boton2 = tkinter.Button(text="Registro", width="30", command=registro, bd=15)
    boton2.pack()  # BOTÓN "Registrarse".
    Label(text="").pack()

    boton3 = tkinter.Button(text="Ver Tickets", width="30", command=visualizar, bd=15)
    boton3.pack()  # BOTÓN "Ver Tickets".
    Label(text="").pack()

    menubar = tkinter.Menu(ventana_principal)
    filemenu = tkinter.Menu(menubar, tearoff=0)
    filemenu.add_command(label="Help", command=helpp)
    filemenu.add_command(label="Exit", command=ventana_principal.quit)
    menubar.add_cascade(label="Ayuda", menu=filemenu)

    ventana_principal.config(menu=menubar)
    ventana_principal.mainloop()


def on_validate(event):
    global label_var
    if all(c in clave2 for c in event.widget.get()):
        label_var.set("CORRECTO")
    else:
        label_var.set("INCORRECTO")


def hacia_atras2():
    ventana_registro.state(newstate='withdraw')
    ventana_principal.state(newstate='normal')
    ventana_principal.deiconify()


def handleProtocol():
    # open a dialog
    if tkinter.messagebox.askokcancel("Notice", "Are you sure to close the window?"):
        # close the application
        ventana_principal.destroy()


def registro():
    style = ttk.Style()
    style.configure("GW.TLabel", foreground="green", background="white")
    style2 = ttk.Style()
    style2.configure("RW.TLabel", foreground="white", background="red")
    ventana_principal.state(newstate='withdraw')
    # Esta ventana (registro) tiene como ventana padre ventana_principal
    global datos1, datos2, ventana_registro, img_png3, img_png4, nombre_usuario, dom, ccs, clave, clave2, \
        entrada_nombre, entrada_clave, entrada_dom, entrada_ccs, entrada_clave2, photoimage, mail
    ventana_registro = Toplevel(ventana_principal)
    ventana_registro.resizable(False, False)
    ventana_registro.iconbitmap('tele_ico.ico')

    img_png3 = PhotoImage(file="mexico_2021.png")
    label_img = tkinter.Label(ventana_registro, image=img_png3)
    label_img.place(x=2, y=0)

    img_png4 = PhotoImage(file="mexsat (1).png")
    label_img2 = tkinter.Label(ventana_registro, image=img_png4)
    label_img2.place(x=2, y=140)

    # ventana_registro = Tk()
    ventana_registro.title("Formulario de Registro")  # Título de la ventana
    ventana_registro.geometry("370x500")  # Tamaño
    var = tkinter.StringVar(ventana_registro)  # Menú de opción múltiple ccs
    var.set('')
    var2 = tkinter.StringVar(ventana_registro)  # Menú de opción múltiple dominio
    var2.set('')

    nombre_usuario = StringVar()  # DECLARAMOS "string" COMO TIPO DE DATO PARA "nombre_usuario"
    mail = StringVar()
    dom = StringVar()
    ccs = StringVar()
    clave = StringVar()  # DECLARAMOS "string" COMO TIPO DE DATO PARA "clave"
    clave2 = StringVar()
    ttk.Label(ventana_registro, text="= Introduzca sus datos =", style="RW.TLabel").pack()
    Label(ventana_registro, text="").pack()

    ttk.Label(ventana_registro, text="Nombre de usuario", style="GW.TLabel").pack()

    entrada_nombre = Entry(ventana_registro, textvariable=nombre_usuario)  # ESPACIO PARA INTRODUCIR EL NOMBRE.
    entrada_nombre.config(width=35)
    entrada_nombre.pack()
    Label(ventana_registro, text="").pack()

    # dominio
    ttk.Label(ventana_registro, text="Ingrese su dominio  de trabajo", style="GW.TLabel").pack()
    opciones_dom = ['Asignaciones y Monitoreo de Recursos', 'Radiofrecuencia', 'Operaciones', 'Ingeniería']
    entrada_dom = tkinter.OptionMenu(ventana_registro, var2, *opciones_dom)  # ESPACIO PARA INTRODUCIR EL dominio.
    datos2 = var2
    entrada_dom.config(width=32)
    entrada_dom.pack()
    Label(ventana_registro, text="").pack()

    # Mail para recuperación de contraseña
    ttk.Label(ventana_registro, text="Ingrese un correo electrónico", style="GW.TLabel").pack()
    entrada_mail = Entry(ventana_registro, textvariable=mail)  # ESPACIO PARA INTRODUCIR EL NOMBRE.
    entrada_mail.config(width=35)
    entrada_mail.pack()
    Label(ventana_registro, text="").pack()

    # CCS:
    ttk.Label(ventana_registro, text="Ingresar el CCS", style="GW.TLabel").pack()
    opciones_ccs = ['Iztapalapa', 'Hermosillo']
    entrada_ccs = tkinter.OptionMenu(ventana_registro, var, *opciones_ccs)
    datos1 = var
    entrada_ccs.config(width=20)
    entrada_ccs.pack()
    Label(ventana_registro, text="").pack()

    # Contraseña
    etiqueta_clave = ttk.Label(ventana_registro, text="Contraseña", style="GW.TLabel")
    etiqueta_clave.pack()
    entrada_clave = Entry(ventana_registro, textvariable=clave, show='*')  # ESPACIO PARA INTRODUCIR LA CONTRASEÑA.
    entrada_clave.pack()
    Label(ventana_registro, text="").pack()

    # Verifica_Contraseña
    etiqueta_clave2 = ttk.Label(ventana_registro, text="Verifica Contraseña", style="GW.TLabel")
    etiqueta_clave2.pack()
    entrada_clave2 = Entry(ventana_registro, textvariable=clave2, show='*')  # ESPACIO PARA INTRODUCIR LA CONTRASEÑA.
    # entrada_clave2.bind("<key>", on_validate)
    entrada_clave2.pack()
    Label(ventana_registro, text="").pack()
    Button(ventana_registro, text="Registrarse", width=10, command=registro_usuario).pack()  # BOTÓN "Registrarse"

    photo = PhotoImage(file="flecha-correcta.png")
    photoimage = photo.subsample(12, 12)
    Button(ventana_registro, text='', image=photoimage, compound=LEFT, command=hacia_atras2, width=10).pack(side=LEFT)

    ventana_registro.protocol("WM_DELETE_WINDOW", handleProtocol)
    menubar = tkinter.Menu(ventana_registro)
    filemenu = tkinter.Menu(menubar, tearoff=0)
    filemenu.add_command(label="Help", command=helpp1)
    filemenu.add_command(label="Exit", command=ventana_principal.quit)
    filemenu.add_command(label="Back", command=hacia_atras2)
    menubar.add_cascade(label="Ayuda", menu=filemenu)
    ventana_registro.config(menu=menubar)


def hacia_atras():
    # Ventana ver tickets <-> ventana_principal
    ventana_principal.state(newstate='normal')
    ventana_viss.state(newstate='withdraw')
    ventana_principal.deiconify()


def visualizar():
    style = ttk.Style()
    style.configure("GW.TLabel", foreground="green", background="white")
    ventana_principal.state(newstate='withdraw')

    global entrada_ticket, entrada_sc, entrada_sitio, entrada_tipo, entrada_componente, entrada_name, entrada, \
        entrada_componente2, entrada_dpvo, entrada_descrip, entrada_date, entrada_status, entrada_hora, frame1, \
        ventana_viss, listBox, entrada_file1, entrada_file2, entrada_file3, entrada_file4, optionmenu_e, entrada_file10, \
        entrada_file5, entrada_file6, entrada_file7, entrada_file8, variable_e, variable_f, optionmenu_f, entrada_file9
    ventana_viss = Toplevel(ventana_principal)
    ventana_viss.geometry("1550x550")
    ventana_viss.title("Visualización de Incidencias")
    ventana_viss.iconbitmap('tele_ico.ico')
    ventana_viss.resizable(False, False)
    ttk.Label(ventana_viss, text="Introduce una clave: ", style="GW.TLabel").place(x=100, y=190)

    variable_e = StringVar()
    variable_f = StringVar()
    optionmenu_e = OptionMenu(ventana_viss, variable_e, *data4.keys())
    optionmenu_e.config(width=25)
    optionmenu_e.place(x=230, y=185)
    optionmenu_f = OptionMenu(ventana_viss, variable_f, '')
    optionmenu_f.config(width=32)
    optionmenu_f.place(x=432, y=185)
    variable_e.trace('w', update_options_F)
    variable_e.set('')
    variable_f.set('')

    Button(ventana_viss, text="Atrás", command=hacia_atras, width=13).place(x=870, y=185)
    Button(ventana_viss, text="Ver Histórico", command=historial2, width=13).place(x=870, y=155)
    Button(ventana_viss, text="Aplicar", command=aplicar, width=10).place(x=780, y=185)

    ttk.Label(ventana_viss, text="No. Ticekt: ", style="GW.TLabel").place(x=10, y=10)
    ttk.Label(ventana_viss, text="Status: ", style="GW.TLabel").place(x=10, y=40)
    ttk.Label(ventana_viss, text="Operador: ", style="GW.TLabel").place(x=10, y=70)
    ttk.Label(ventana_viss, text="Spacecraft", style="GW.TLabel").place(x=10, y=100)
    ttk.Label(ventana_viss, text="CCS: ", style="GW.TLabel").place(x=10, y=130)
    ttk.Label(ventana_viss, text="Tipo de falla: ", style="GW.TLabel").place(x=300, y=10)
    ttk.Label(ventana_viss, text="Componente: ", style="GW.TLabel").place(x=300, y=40)
    ttk.Label(ventana_viss, text="Comp Secundario: ", style="GW.TLabel").place(x=300, y=70)
    ttk.Label(ventana_viss, text="Dispositivo: ", style="GW.TLabel").place(x=300, y=100)
    ttk.Label(ventana_viss, text="Descripción de la falla: ", style="GW.TLabel").place(x=300, y=130)
    ttk.Label(ventana_viss, text="Fecha: ", style="GW.TLabel").place(x=590, y=10)
    ttk.Label(ventana_viss, text="Hora: ", style="GW.TLabel").place(x=590, y=40)

    ttk.Label(ventana_viss, text="File 1: ", style="GW.TLabel").place(x=870, y=10)
    ttk.Label(ventana_viss, text="File 2: ", style="GW.TLabel").place(x=870, y=40)
    ttk.Label(ventana_viss, text="File 3: ", style="GW.TLabel").place(x=870, y=70)
    ttk.Label(ventana_viss, text="File 4: ", style="GW.TLabel").place(x=870, y=100)
    ttk.Label(ventana_viss, text="File 5: ", style="GW.TLabel").place(x=1200, y=10)
    ttk.Label(ventana_viss, text="File 6: ", style="GW.TLabel").place(x=1200, y=40)
    ttk.Label(ventana_viss, text="File 7: ", style="GW.TLabel").place(x=1200, y=70)
    ttk.Label(ventana_viss, text="File 8: ", style="GW.TLabel").place(x=1200, y=100)
    ttk.Label(ventana_viss, text="File 9: ", style="GW.TLabel").place(x=1200, y=130)
    ttk.Label(ventana_viss, text="File 10: ", style="GW.TLabel").place(x=1200, y=160)
    entrada_ticket = tkinter.Entry(ventana_viss)
    entrada_ticket.place(x=140, y=10)
    entrada_status = tkinter.Entry(ventana_viss)
    entrada_status.place(x=140, y=40)
    entrada_name = tkinter.Entry(ventana_viss)
    entrada_name.place(x=140, y=70)
    entrada_sc = tkinter.Entry(ventana_viss)
    entrada_sc.place(x=140, y=100)
    entrada_sitio = tkinter.Entry(ventana_viss)
    entrada_sitio.place(x=140, y=130)
    entrada_tipo = tkinter.Entry(ventana_viss)
    entrada_tipo.place(x=430, y=10)
    entrada_componente = tkinter.Entry(ventana_viss)
    entrada_componente.place(x=430, y=40)
    entrada_componente2 = tkinter.Entry(ventana_viss)
    entrada_componente2.place(x=430, y=70)
    entrada_dpvo = tkinter.Entry(ventana_viss)
    entrada_dpvo.place(x=430, y=100)
    entrada_descrip = tkinter.Entry(ventana_viss, width=75)
    entrada_descrip.place(x=430, y=130)
    entrada_date = tkinter.Entry(ventana_viss)
    entrada_date.place(x=700, y=10)
    entrada_hora = tkinter.Entry(ventana_viss)
    entrada_hora.place(x=700, y=40)
    entrada_file1 = tkinter.Entry(ventana_viss, width=35)
    entrada_file1.place(x=950, y=10)
    entrada_file2 = tkinter.Entry(ventana_viss, width=35)
    entrada_file2.place(x=950, y=40)
    entrada_file3 = tkinter.Entry(ventana_viss, width=35)
    entrada_file3.place(x=950, y=70)
    entrada_file4 = tkinter.Entry(ventana_viss, width=35)
    entrada_file4.place(x=950, y=100)
    entrada_file5 = Entry(ventana_viss, width=38)
    entrada_file5.place(x=1280, y=10)
    entrada_file6 = Entry(ventana_viss, width=38)
    entrada_file6.place(x=1280, y=40)
    entrada_file7 = Entry(ventana_viss, width=38)
    entrada_file7.place(x=1280, y=70)
    entrada_file8 = Entry(ventana_viss, width=38)
    entrada_file8.place(x=1280, y=100)
    entrada_file9 = Entry(ventana_viss, width=38)
    entrada_file9.place(x=1280, y=130)
    entrada_file10 = Entry(ventana_viss, width=38)
    entrada_file10.place(x=1280, y=160)
    ventana_viss.grid_columnconfigure(0, weight=1)
    ventana_viss.grid_rowconfigure(0, weight=1)

    cols = ('ticket', 'status', 'operador', 'spacecraft', 'ccs', 'tipo_falla', 'componente', 'componente2', 'device',
            'descripción',
            'date', 'hora', 'files', 'files2', 'files3', 'files4', 'files5', 'files6', 'files7', 'files8', 'files9',
            'files10')

    canvas = tkinter.Canvas(ventana_viss, height=285, width=1550, bg="yellow", borderwidth=5, background="#ffffff")
    frame1 = LabelFrame(canvas, text="= Listado de incidencias en el Centro de Control Satelital =", bg="yellow", bd=4,
                        padx=5, pady=1, highlightcolor="green", height=280, width=4470)
    listBox = ttk.Treeview(frame1, columns=cols, show='headings')
    vsb = ttk.Scrollbar(ventana_viss, orient="vertical", command=listBox.yview)
    vsb.place(relx=0.978, rely=0.355, relheight=0.6, relwidth=0.03)
    listBox.configure(yscrollcommand=vsb.set)

    hsb = tkinter.Scrollbar(ventana_viss, orient="horizontal", command=canvas.xview)
    canvas.configure(xscrollcommand=hsb.set)
    hsb.grid(row=2, column=0)

    canvas.grid(row=1, column=0)
    canvas.create_window((4, 4), window=frame1, anchor="nw")
    frame1.bind("<Configure>", lambda event, canvas=canvas: onFrameConfigure(canvas))

    for col in cols:
        listBox.heading(col, text=col)
        listBox.place(x=10, y=10)

    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
    mycursor = mysqldb.cursor()
    mycursor.execute(
        "SELECT ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10 FROM datos_incidencias2")
    records = mycursor.fetchall()
    ventana_viss.protocol("WM_DELETE_WINDOW", handleProtocol)
    ventana_viss.rowconfigure(0, weight=1)

    for i, (ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date,
            hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10) in enumerate(records,
                                                                                                               start=1):
        listBox.insert("", "end", values=(
            ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date,
            hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10))

    listBox.bind('<Double-Button-1>', GetValue)
    menubar = tkinter.Menu(ventana_viss)
    filemenu = tkinter.Menu(menubar, tearoff=0)
    filemenu.add_command(label="Help", command=helpp3)
    filemenu.add_command(label="Exit", command=ventana_viss.quit)
    filemenu.add_command(label="Back", command=hacia_atras)
    menubar.add_cascade(label="Ayuda", menu=filemenu)
    ventana_viss.config(menu=menubar)
    ventana_viss.protocol("WM_DELETE_WINDOW", handleProtocol)


def hacia_atras3():
    ventana_login.state(newstate='withdraw')  # Cierra la ventana de logueo
    ventana_principal.state(newstate='normal')  # Abre la ventana principal
    ventana_principal.deiconify()  # Hace que surja en la pantalla


def recupera_pass():
    pass


def login():
    style = ttk.Style()
    style.configure("GW.TLabel", foreground="green", background="white")
    style2 = ttk.Style()
    style2.configure("RW.TLabel", foreground="white", background="red")
    ventana_principal.state(newstate='withdraw')
    global ventana_login, verifica_clave, entrada_login_usuario, entrada_login_clave, var5, verifica_usuario, img_png8
    ventana_login = Toplevel(ventana_principal)
    ventana_login.title("Acceso a la cuenta")
    ventana_login.geometry("250x250")
    ventana_login.resizable(False, False)
    ventana_login.iconbitmap('tele_ico.ico')

    img_png8 = PhotoImage(file="telecomm_circular.png")
    label_img = tkinter.Label(ventana_login, image=img_png8)
    label_img.place(x=10, y=0)

    ttk.Label(ventana_login, text="Introduzca nombre de usuario y contraseña", style="RW.TLabel").pack()
    Label(ventana_login, text="").pack()  # Espacio en blanco

    verifica_usuario = StringVar()
    verifica_clave = StringVar()

    ttk.Label(ventana_login, text="Nombre usuario", style="GW.TLabel").pack()
    entrada_login_usuario = Entry(ventana_login, textvariable=verifica_usuario)
    entrada_login_usuario.pack()

    Label(ventana_login, text="").pack()

    ttk.Label(ventana_login, text="Contraseña", style="GW.TLabel").pack()
    entrada_login_clave = Entry(ventana_login, textvariable=verifica_clave, show='*')
    entrada_login_clave.pack()
    Label(ventana_login, text="").pack()
    Button(ventana_login, text="Acceder", width=10, command=verifica_login).pack()
    photo = PhotoImage(file="hacia_atras2.png")
    photoimage = photo.subsample(5, 5)
    ventana_login.protocol("WM_DELETE_WINDOW", handleProtocol)
    ttk.Button(ventana_login, text='Atrás', image=photoimage, compound=LEFT, command=hacia_atras3).pack()
    ttk.Button(ventana_login, text="¿Olvidó su contraseña?", style="GW.TLabel", command=recupera_pass).pack()
    menubar = tkinter.Menu(ventana_login)
    filemenu = tkinter.Menu(menubar, tearoff=0)
    filemenu.add_command(label="Help", command=helpp2)
    filemenu.add_command(label="Exit", command=ventana_principal.quit)
    filemenu.add_command(label="Back", command=hacia_atras3)
    menubar.add_cascade(label="Ayuda", menu=filemenu)
    ventana_login.config(menu=menubar)

# VENTANA "VERIFICACION DE LOGIN".

def GetValue(event): #el que se usa en visualizar, modifica_reg y aplicar
    global file_1, im, im2, photoimage2
    entrada_ticket.delete(0, END)
    entrada_status.delete(0, END)
    entrada_name.delete(0, END)
    entrada_sc.delete(0, END)
    entrada_sitio.delete(0, END)
    entrada_tipo.delete(0, END)
    entrada_componente.delete(0, END)
    entrada_componente2.delete(0, END)
    entrada_dpvo.delete(0, END)
    entrada_descrip.delete(0, END)
    entrada_date.delete(0, END)
    entrada_hora.delete(0, END)
    entrada_file1.delete(0, END)
    entrada_file2.delete(0, END)
    entrada_file3.delete(0, END)
    entrada_file4.delete(0, END)
    entrada_file5.delete(0, END)
    entrada_file6.delete(0, END)
    entrada_file7.delete(0, END)
    entrada_file8.delete(0, END)
    entrada_file9.delete(0, END)
    entrada_file10.delete(0, END)
    try:
        row_id = listBox.selection()[0]
        select = listBox.set(row_id)

        entrada_ticket.insert(0, select['ticket'])
        entrada_status.insert(0, select['status'])
        entrada_name.insert(0, select['operador'])
        entrada_sc.insert(0, select['spacecraft'])
        entrada_sitio.insert(0, select['ccs'])
        entrada_tipo.insert(0, select['tipo_falla'])
        entrada_componente.insert(0, select['componente'])
        entrada_componente2.insert(0, select['componente2'])
        entrada_dpvo.insert(0, select['device'])
        entrada_descrip.insert(0, select['descripción'])
        entrada_date.insert(0, select['date'])
        entrada_hora.insert(0, select['hora'])

        entrada_file1.insert(0, select['files'])
        file_1 = entrada_file1.get()
        print(file_1)
        entrada_file2.insert(0, select['files2'])
        file_2 = entrada_file2.get()
        print(file_2)
        entrada_file3.insert(0, select['files3'])
        entrada_file4.insert(0, select['files4'])
        entrada_file5.insert(0, select['files5'])
        entrada_file6.insert(0, select['files6'])
        entrada_file7.insert(0, select['files7'])
        entrada_file8.insert(0, select['files8'])
        entrada_file9.insert(0, select['files9'])
        entrada_file10.insert(0, select['files10'])

        try:
            im = Image.open(file_1)
            photo = PhotoImage(file="ver_imagen.png")
            photoimage = photo.subsample(12, 12)
            Button(ventana_viss, text="Ap", image=photoimage, command=ver_foto, width=10).place(x=900, y=185)

        except Exception as e:
            print(e)

        try:
            im2 = Image.open(file_2)
            photo = PhotoImage(file="ver_imagen2.png")
            photoimage2 = photo.subsample(10, 10)
            Button(ventana_viss, text="", image=photoimage2, command=ver_foto2, width=10).place(x=1180, y=40)
            print("Si llega")
        except Exception as e:
            print(e)

    except Exception as e:
        print(e)

def ver_foto():
    #imagen = Image.open(file_1)
    im.show()

def ver_foto2():
    #imagen = Image.open(file_1)
    im2.show()

def GetValue2(event):  #El que se usa en historial2, aplicar2 y historial2
    new_entrada_ticket.delete(0, END)
    new_entrada_status.delete(0, END)
    new_entrada_name.delete(0, END)
    new_entrada_sc.delete(0, END)
    new_entrada_sitio.delete(0, END)
    new_entrada_tipo.delete(0, END)
    new_entrada_componente.delete(0, END)
    new_entrada_componente2.delete(0, END)
    new_entrada_dpvo.delete(0, END)
    new_entrada_descrip.delete(0, END)
    new_entrada_date.delete(0, END)
    new_entrada_hora.delete(0, END)
    new_entrada_file1.delete(0, END)
    new_entrada_file2.delete(0, END)
    new_entrada_file3.delete(0, END)
    new_entrada_file4.delete(0, END)
    new_entrada_file5.delete(0, END)
    new_entrada_file6.delete(0, END)
    new_entrada_file7.delete(0, END)
    new_entrada_file8.delete(0, END)
    new_entrada_file9.delete(0, END)
    new_entrada_file10.delete(0, END)
    try:
        row_id = listBox2.selection()[0]
        select = listBox2.set(row_id)

        new_entrada_ticket.insert(0, select['registro'])
        new_entrada_status.insert(0, select['status'])
        new_entrada_name.insert(0, select['operador'])
        new_entrada_sc.insert(0, select['spacecraft'])
        new_entrada_sitio.insert(0, select['ccs'])
        new_entrada_tipo.insert(0, select['tipo_falla'])
        new_entrada_componente.insert(0, select['componente'])
        new_entrada_componente2.insert(0, select['componente2'])
        new_entrada_dpvo.insert(0, select['device'])
        new_entrada_descrip.insert(0, select['descripción'])
        new_entrada_date.insert(0, select['date'])
        new_entrada_hora.insert(0, select['hora'])
        new_entrada_file1.insert(0, select['files'])
        new_entrada_file2.insert(0, select['files2'])
        new_entrada_file3.insert(0, select['files3'])
        new_entrada_file4.insert(0, select['files4'])
        new_entrada_file5.insert(0, select['files5'])
        new_entrada_file6.insert(0, select['files6'])
        new_entrada_file7.insert(0, select['files7'])
        new_entrada_file8.insert(0, select['files8'])
        new_entrada_file9.insert(0, select['files9'])
        new_entrada_file10.insert(0, select['files10'])
    except Exception as e:
        print("Aquí se está cortando")
        print(e)


def destroy_window2():
    ventana_cerrars.state('withdraw')
    ventana_login.state(newstate='normal')
    ventana_login.deiconify()


def cerrar_sesion():
    ventana_decision.state('withdraw')
    global ventana_cerrars
    ventana_cerrars = Tk()
    ventana_cerrars.title("Status: Cierre de sesión")
    ventana_cerrars.geometry("315x100")
    ventana_cerrars.resizable(False, False)
    Label(ventana_cerrars, text="La sesión se cerró correctamente").pack()
    Label(ventana_cerrars, text="¡ Hasta luego !").pack()
    Button(ventana_cerrars, text="OK", command=destroy_window2).pack()


def decision():
    ventana_login.state(newstate='withdraw')  # Desaparece la ventana anterior
    ventana_principal.state(newstate='withdraw')  # Desaparece la ventana principal
    global ventana_decision
    ventana_decision = Toplevel(ventana_login)  # Indica que la ventana padre es la del login
    ventana_decision.iconbitmap('tele_ico.ico')
    ventana_decision.resizable(False, False)  # No se pueden cambiar las dimensiones de la ventana
    ventana_decision.geometry("360x200")  # DIMENSIONES DE LA VENTANA bxh
    ventana_decision.title("Gestión de incidencias")  # TITULO DE LA VENTANA
    Label(ventana_decision, text="Escoja una opción", width="300",
          font=("Calibri", 13)).pack()  # ETIQUETA CON TEXTO
    Label(ventana_decision, text="").pack()

    Button(ventana_decision, text="Agregar incidencia", width="30", command=exito_login).pack()  # Botón para agregar
    Label(ventana_decision, text="").pack()  # incidencia

    Button(ventana_decision, text="Modificar Registros", width="30", command=modifica_reg).pack()  # Botón para modifi
    Label(ventana_decision, text="").pack()  # car registros
    ventana_decision.protocol("WM_DELETE_WINDOW", handleProtocol)
    Button(ventana_decision, text="Log out", width="30", command=cerrar_sesion).pack()  # Botón para cerrar
    # la sesión


def hacia_atras5():
    try:
        rooot.state(newstate='withdraw')
        ventana_decision.state(newstate='normal')
        ventana_decision.deiconify()
    except Exception as e:
        hist_window.state(newstate='withdraw')
        rooot.state(newstate='normal')
        rooot.deiconify()


def hacia_atras6():
    root.state(newstate='withdraw')
    ventana_decision.state(newstate='normal')
    ventana_decision.deiconify()


def hacia_atras7():
    seguimiento_win.state(newstate='withdraw')
    hist_window.state(newstate='normal')
    hist_window.deiconify()


def modifica_reg():
    style = ttk.Style()
    style.configure("GW.TLabel", foreground="green", background="white")
    ventana_decision.state(newstate='withdraw')
    global entrada_ticket, entrada_sc, entrada_sitio, entrada_tipo, entrada_componente, entrada_name, entrada, \
        entrada_componente2, entrada_dpvo, entrada_descrip, entrada_date, entrada_status, entrada_hora, \
        entrada_file1, entrada_file2, entrada_file3, entrada_file4, entrada_file5, entrada_file6, \
        entrada_file7, entrada_file8, listBox, rooot, datos_clave, datos_busqueda, variable_e, variable_f, \
        optionmenu_e, optionmenu_f, entrada_file9, entrada_file10, frame1
    rooot = Toplevel(ventana_decision)
    rooot.geometry("1550x540")
    rooot.title("Visualización y Modificación de Incidencias")
    rooot.iconbitmap('tele_ico.ico')
    rooot.resizable(False, False)
    # tk.Label(root,text="Visualización de Incidencias", fg="black", font=(None, 25)).place(x=400, y=5)
    global ventana_tickets, entrada_ope, entrada_param, varope, entrada_filter
    filtro = StringVar()
    ttk.Label(rooot, text="Introduce una clave: ", style="GW.TLabel").place(x=100, y=190)

    variable_e = StringVar()
    variable_f = StringVar()
    optionmenu_e = OptionMenu(rooot, variable_e, *data4.keys())
    optionmenu_e.config(width=25)
    optionmenu_e.place(x=230, y=185)
    optionmenu_f = OptionMenu(rooot, variable_f, '')
    optionmenu_f.config(width=32)
    optionmenu_f.place(x=432, y=185)
    variable_e.trace('w', update_options_F)
    variable_e.set('')
    variable_f.set('')

    Button(rooot, text="Atrás", command=hacia_atras5, width=13).place(x=970, y=155)
    Button(rooot, text="Ver histórico", command=historial, width=13).place(x=970, y=185)
    Button(rooot, text="Update", command=update, width=13).place(x=870, y=155)
    Button(rooot, text="Delete", command=delete, width=13).place(x=870, y=185)
    Button(rooot, text="Aplicar", command=aplicar, width=10).place(x=675, y=187)

    ttk.Label(rooot, text="No. Ticekt: ", style="GW.TLabel").place(x=10, y=10)
    ttk.Label(rooot, text="Status: ", style="GW.TLabel").place(x=10, y=40)
    ttk.Label(rooot, text="Operador: ", style="GW.TLabel").place(x=10, y=70)
    ttk.Label(rooot, text="Spacecraft", style="GW.TLabel").place(x=10, y=100)
    ttk.Label(rooot, text="CCS: ", style="GW.TLabel").place(x=10, y=130)
    ttk.Label(rooot, text="Tipo de falla: ", style="GW.TLabel").place(x=300, y=10)
    ttk.Label(rooot, text="Componente: ", style="GW.TLabel").place(x=300, y=40)
    ttk.Label(rooot, text="Comp Secundario: ", style="GW.TLabel").place(x=300, y=70)
    ttk.Label(rooot, text="Dispositivo: ", style="GW.TLabel").place(x=300, y=100)
    ttk.Label(rooot, text="Descripción de la falla: ", style="GW.TLabel").place(x=300, y=130)
    ttk.Label(rooot, text="Fecha: ", style="GW.TLabel").place(x=590, y=10)
    ttk.Label(rooot, text="Hora: ", style="GW.TLabel").place(x=590, y=40)
    ttk.Label(rooot, text="File 1: ", style="GW.TLabel").place(x=870, y=10)
    ttk.Label(rooot, text="File 2: ", style="GW.TLabel").place(x=870, y=40)
    ttk.Label(rooot, text="File 3: ", style="GW.TLabel").place(x=870, y=70)
    ttk.Label(rooot, text="File 4: ", style="GW.TLabel").place(x=870, y=100)
    ttk.Label(rooot, text="File 5: ", style="GW.TLabel").place(x=1200, y=10)
    ttk.Label(rooot, text="File 6: ", style="GW.TLabel").place(x=1200, y=40)
    ttk.Label(rooot, text="File 7: ", style="GW.TLabel").place(x=1200, y=70)
    ttk.Label(rooot, text="File 8: ", style="GW.TLabel").place(x=1200, y=100)
    ttk.Label(rooot, text="File 9: ", style="GW.TLabel").place(x=1200, y=130)
    ttk.Label(rooot, text="File 10: ", style="GW.TLabel").place(x=1200, y=160)

    entrada_ticket = Entry(rooot)
    entrada_ticket.place(x=140, y=10)
    entrada_status = Entry(rooot)
    entrada_status.place(x=140, y=40)
    entrada_name = Entry(rooot)
    entrada_name.place(x=140, y=70)
    entrada_sc = Entry(rooot)
    entrada_sc.place(x=140, y=100)
    entrada_sitio = Entry(rooot)
    entrada_sitio.place(x=140, y=130)
    entrada_tipo = Entry(rooot)
    entrada_tipo.place(x=430, y=10)
    entrada_componente = Entry(rooot)
    entrada_componente.place(x=430, y=40)
    entrada_componente2 = Entry(rooot)
    entrada_componente2.place(x=430, y=70)
    entrada_dpvo = Entry(rooot)
    entrada_dpvo.place(x=430, y=100)
    entrada_descrip = Entry(rooot, width=60)
    entrada_descrip.place(x=430, y=130)
    entrada_date = Entry(rooot)
    entrada_date.place(x=700, y=10)
    entrada_hora = Entry(rooot)
    entrada_hora.place(x=700, y=40)
    entrada_file1 = Entry(rooot, width=35)
    entrada_file1.place(x=950, y=10)
    entrada_file2 = Entry(rooot, width=35)
    entrada_file2.place(x=950, y=40)
    entrada_file3 = Entry(rooot, width=35)
    entrada_file3.place(x=950, y=70)
    entrada_file4 = Entry(rooot, width=35)
    entrada_file4.place(x=950, y=100)
    entrada_file5 = Entry(rooot, width=35)
    entrada_file5.place(x=1280, y=10)
    entrada_file6 = Entry(rooot, width=35)
    entrada_file6.place(x=1280, y=40)
    entrada_file7 = Entry(rooot, width=35)
    entrada_file7.place(x=1280, y=70)
    entrada_file8 = Entry(rooot, width=35)
    entrada_file8.place(x=1280, y=100)
    entrada_file9 = Entry(rooot, width=35)
    entrada_file9.place(x=1280, y=130)
    entrada_file10 = Entry(rooot, width=35)
    entrada_file10.place(x=1280, y=160)
    rooot.grid_columnconfigure(0, weight=1)
    rooot.grid_rowconfigure(0, weight=1)
    cols = ('ticket', 'status', 'operador', 'spacecraft', 'ccs', 'tipo_falla', 'componente', 'componente2', 'device',
            'descripción',
            'date', 'hora', 'files', 'files2', 'files3', 'files4', 'files5', 'files6', 'files7', 'files8', 'files9',
            'files10')

    canvas = tkinter.Canvas(rooot, height=285, width=1550, bg="yellow", borderwidth=5, background="#ffffff")
    frame1 = LabelFrame(canvas, text="= Listado de incidencias en el Centro de Control Satelital =", bg="blue", bd=4,
                        padx=5, pady=1, highlightcolor="green", height=280, width=4470)
    listBox = ttk.Treeview(frame1, columns=cols, show='headings')
    vsb = ttk.Scrollbar(rooot, orient="vertical", command=listBox.yview)
    vsb.place(relx=0.978, rely=0.355, relheight=0.6, relwidth=0.03)
    listBox.configure(yscrollcommand=vsb.set)

    hsb = tkinter.Scrollbar(rooot, orient="horizontal", command=canvas.xview)
    canvas.configure(xscrollcommand=hsb.set)
    hsb.grid(row=2, column=0)

    canvas.grid(row=1, column=0)
    canvas.create_window((4, 4), window=frame1, anchor="nw")
    frame1.bind("<Configure>", lambda event, canvas=canvas: onFrameConfigure(canvas))

    for col in cols:
        listBox.heading(col, text=col)
        listBox.grid(row=0, column=0)
        listBox.place(x=10, y=10)

    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
    mycursor = mysqldb.cursor()
    mycursor.execute(
        "SELECT ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10 FROM datos_incidencias2")
    records = mycursor.fetchall()
    rooot.protocol("WM_DELETE_WINDOW", handleProtocol)
    rooot.rowconfigure(0, weight=1)

    for i, (ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date,
            hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10) in enumerate(records,
                                                                                                               start=1):
        listBox.insert("", "end", values=(
            ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date,
            hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10))
    listBox.bind('<Double-Button-1>', GetValue)


def sin_coincidencia():
    global no_match
    no_match = Toplevel()
    no_match.title("ERROR")
    no_match.geometry("215x100")
    Label(no_match, text="Sin coincidencia para el ticket ingresado").pack()
    Button(no_match, text="OK", command=borrar_no_match).pack()  # EJECUTA "borrar_no_clave()".
    no_match.protocol("WM_DELETE_WINDOW", handleProtocol)


def hacia_atras4():
    try:
        hist_window.state(newstate='withdraw')
        rooot.state(newstate='normal')
        rooot.deiconify()
    except Exception as e:
        ventana_viss.state(newstate='normal')
        ventana_viss.deiconify()


def historial2():
    global hist_window, ticket_enter, sc_enter, ccs_enter, type_enter, component_enter, component2_enter, dpvo_enter, descrip_enter, \
        variable_e3, variable_f3, optionmenu_e3, optionmenu_f3, variable_e1, variable_f1, optionmenu_f1, sc_enter, ccs_enter, \
        type_enter, component_enter, component2_enter, dpvo_enter, descrip_enter, new_entrada_ticket, new_entrada_status, \
        new_entrada_name, new_entrada_sc, new_entrada_sitio, new_entrada_tipo, new_entrada_componente, new_entrada_componente2, new_entrada_dpvo, \
        new_entrada_descrip, new_entrada_date, new_entrada_hora, new_entrada_file1, new_entrada_file2, new_entrada_file3, new_entrada_file4, \
        new_entrada_file5, new_entrada_file6, new_entrada_file7, new_entrada_file8, new_entrada_file9, new_entrada_file10, \
        listBox2, frame11
    ventana_viss.state(newstate='withdraw')

    ticket_enter = entrada_ticket.get()
    sc_enter = entrada_sc.get()
    ccs_enter = entrada_sitio.get()
    type_enter = entrada_tipo.get()
    component_enter = entrada_componente.get()
    component2_enter = entrada_componente2.get()
    dpvo_enter = entrada_dpvo.get()
    descrip_enter = entrada_descrip.get()

    if ticket_enter == "":
        no_hay_ticket()
    else:
        try:
            mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
            mycursor = mysqldb.cursor()
            mycursor.execute("SELECT ticket FROM datos_incidencias2 where ticket=" + str(ticket_enter))
            records = mycursor.fetchone()
            numero_ticket = records[0]

            if str(numero_ticket) == ticket_enter:
                hist_window = Toplevel(ventana_principal)
                hist_window.geometry("1550x550")
                hist_window.title("Registro histórico de seguimiento de incidencias")
                hist_window.iconbitmap('tele_ico.ico')
                Button(hist_window, text="Atrás", command=hacia_atras4, width=20).place(x=800, y=187)
                variable_e1 = StringVar()
                variable_f1 = StringVar()
                optionmenu_e1 = OptionMenu(hist_window, variable_e1, *data4.keys())
                optionmenu_e1.config(width=25)
                optionmenu_e1.place(x=230, y=185)
                optionmenu_f1 = OptionMenu(hist_window, variable_f1, '')
                optionmenu_f1.config(width=32)
                optionmenu_f1.place(x=432, y=185)
                variable_e1.trace('w', update_options_F1)
                variable_e1.set('')
                variable_f1.set('')

                ttk.Label(hist_window, text="No. Ticekt: ", style="GW.TLabel").place(x=10, y=10)
                ttk.Label(hist_window, text="Status: ", style="GW.TLabel").place(x=10, y=40)
                ttk.Label(hist_window, text="Operador: ", style="GW.TLabel").place(x=10, y=70)
                ttk.Label(hist_window, text="Spacecraft", style="GW.TLabel").place(x=10, y=100)
                ttk.Label(hist_window, text="CCS: ", style="GW.TLabel").place(x=10, y=130)
                ttk.Label(hist_window, text="Tipo de falla: ", style="GW.TLabel").place(x=300, y=10)
                ttk.Label(hist_window, text="Componente: ", style="GW.TLabel").place(x=300, y=40)
                ttk.Label(hist_window, text="Comp Secundario: ", style="GW.TLabel").place(x=300, y=70)
                ttk.Label(hist_window, text="Dispositivo: ", style="GW.TLabel").place(x=300, y=100)
                ttk.Label(hist_window, text="Descripción de la falla: ", style="GW.TLabel").place(x=300, y=130)
                ttk.Label(hist_window, text="Fecha: ", style="GW.TLabel").place(x=590, y=10)
                ttk.Label(hist_window, text="Hora: ", style="GW.TLabel").place(x=590, y=40)
                ttk.Label(hist_window, text="File 1: ", style="GW.TLabel").place(x=870, y=10)
                ttk.Label(hist_window, text="File 2: ", style="GW.TLabel").place(x=870, y=40)
                ttk.Label(hist_window, text="File 3: ", style="GW.TLabel").place(x=870, y=70)
                ttk.Label(hist_window, text="File 4: ", style="GW.TLabel").place(x=870, y=100)
                ttk.Label(hist_window, text="File 5: ", style="GW.TLabel").place(x=1200, y=10)
                ttk.Label(hist_window, text="File 6: ", style="GW.TLabel").place(x=1200, y=40)
                ttk.Label(hist_window, text="File 7: ", style="GW.TLabel").place(x=1200, y=70)
                ttk.Label(hist_window, text="File 8: ", style="GW.TLabel").place(x=1200, y=100)
                ttk.Label(hist_window, text="File 9: ", style="GW.TLabel").place(x=1200, y=130)
                ttk.Label(hist_window, text="File 10: ", style="GW.TLabel").place(x=1200, y=160)
                new_entrada_ticket = Entry(hist_window)
                new_entrada_ticket.place(x=140, y=10)
                new_entrada_status = Entry(hist_window)
                new_entrada_status.place(x=140, y=40)
                new_entrada_name = Entry(hist_window)
                new_entrada_name.place(x=140, y=70)
                new_entrada_sc = Entry(hist_window)
                new_entrada_sc.place(x=140, y=100)
                new_entrada_sitio = Entry(hist_window)
                new_entrada_sitio.place(x=140, y=130)
                new_entrada_tipo = Entry(hist_window)
                new_entrada_tipo.place(x=430, y=10)
                new_entrada_componente = Entry(hist_window)
                new_entrada_componente.place(x=430, y=40)
                new_entrada_componente2 = Entry(hist_window)
                new_entrada_componente2.place(x=430, y=70)
                new_entrada_dpvo = Entry(hist_window)
                new_entrada_dpvo.place(x=430, y=100)
                new_entrada_descrip = Entry(hist_window, width=60)
                new_entrada_descrip.place(x=430, y=130)
                new_entrada_date = Entry(hist_window)
                new_entrada_date.place(x=700, y=10)
                new_entrada_hora = Entry(hist_window)
                new_entrada_hora.place(x=700, y=40)
                new_entrada_file1 = Entry(hist_window, width=35)
                new_entrada_file1.place(x=950, y=10)
                new_entrada_file2 = Entry(hist_window, width=35)
                new_entrada_file2.place(x=950, y=40)
                new_entrada_file3 = Entry(hist_window, width=35)
                new_entrada_file3.place(x=950, y=70)
                new_entrada_file4 = Entry(hist_window, width=35)
                new_entrada_file4.place(x=950, y=100)
                new_entrada_file5 = Entry(hist_window, width=35)
                new_entrada_file5.place(x=1280, y=10)
                new_entrada_file6 = Entry(hist_window, width=35)
                new_entrada_file6.place(x=1280, y=40)
                new_entrada_file7 = Entry(hist_window, width=35)
                new_entrada_file7.place(x=1280, y=70)
                new_entrada_file8 = Entry(hist_window, width=35)
                new_entrada_file8.place(x=1280, y=100)
                new_entrada_file9 = Entry(hist_window, width=35)
                new_entrada_file9.place(x=1280, y=130)
                new_entrada_file10 = Entry(hist_window, width=35)
                new_entrada_file10.place(x=1280, y=160)

                Button(hist_window, text="Aplicar", command=aplicar2, width=10).place(x=710, y=187)
                ttk.Label(hist_window, text="Introduce una clave: ", style="GW.TLabel").place(x=100, y=190)

                hist_window.protocol("WM_DELETE_WINDOW", handleProtocol)
                cols2 = (
                'registro', 'status', 'operador', 'spacecraft', 'ccs', 'tipo_falla', 'componente', 'componente2',
                'device',
                'descripción', 'date', 'hora', 'files', 'files2', 'files3', 'files4', 'files5', 'files6', 'files7',
                'files8', 'files9', 'files10')

                canvas = tkinter.Canvas(hist_window, height=285, width=1550, bg="red", borderwidth=5,
                                        background="#ffffff")
                frame11 = LabelFrame(canvas, text="= Listado de incidencias en el Centro de Control Satelital =",
                                     bg="yellow", bd=4, padx=5, pady=1, highlightcolor="green", height=280, width=4470)
                listBox2 = ttk.Treeview(frame11, columns=cols2, show='headings')
                vsb = ttk.Scrollbar(hist_window, orient="vertical", command=listBox2.yview)
                vsb.place(relx=0.978, rely=0.355, relheight=0.6, relwidth=0.03)
                listBox2.configure(yscrollcommand=vsb.set)

                hsb = tkinter.Scrollbar(hist_window, orient="horizontal", command=canvas.xview)
                canvas.configure(xscrollcommand=hsb.set)
                hsb.place(x=700, y=520)

                canvas.place(x=10, y=220)
                canvas.create_window((4, 4), window=frame11, anchor="nw")
                frame11.bind("<Configure>", lambda event, canvas=canvas: onFrameConfigure(canvas))

                for col in cols2:
                    listBox2.heading(col, text=col)
                    listBox2.grid(row=1, column=0, rowspan=2, ipady=1)
                    listBox2.place(x=10, y=10)

                mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
                mycursor = mysqldb.cursor()
                add_string = "ticket_no_"
                mycursor.execute(
                    "SELECT registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10 FROM " + add_string + str(
                        numero_ticket))
                records2 = mycursor.fetchall()

                for i, (
                registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion,
                date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10) \
                        in enumerate(records2, start=1):
                    listBox2.insert("", "end", values=(
                        registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device,
                        descripcion, date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9,
                        files10))
                    mysqldb.close()
                listBox2.bind('<Double-Button-1>', GetValue2)
            else:
                sin_coincidencia()
                pass
        except Exception as e:
            print(e)
            mysqldb.rollback()
            mysqldb.close()
            sin_coincidencia()


def historial():
    global hist_window, variable_e1, variable_f1, optionmenu_e1, optionmenu_f1, ticket_enter, sc_enter, ccs_enter, \
        type_enter, component_enter, component2_enter, dpvo_enter, descrip_enter, new_entrada_ticket, new_entrada_status, \
        new_entrada_name, new_entrada_sc, new_entrada_sitio, new_entrada_tipo, new_entrada_componente, listBox2, \
        new_entrada_dpvo, new_entrada_descrip, new_entrada_date, new_entrada_hora, new_entrada_file1, new_entrada_file2, \
        new_entrada_file3, new_entrada_file4, new_entrada_componente2, new_entrada_file5, new_entrada_file6, \
        new_entrada_file7, new_entrada_file8, new_entrada_file9, new_entrada_file10, frame11

    rooot.state(newstate='withdraw')
    hist_window = Toplevel(rooot)
    hist_window.geometry("1550x540")
    hist_window.title("Registro histórico de seguimiento de incidencias")
    hist_window.iconbitmap('tele_ico.ico')
    hist_window.resizable(False, False)
    ticket_enter = entrada_ticket.get()
    sc_enter = entrada_sc.get()
    ccs_enter = entrada_sitio.get()
    type_enter = entrada_tipo.get()
    component_enter = entrada_componente.get()
    component2_enter = entrada_componente2.get()
    dpvo_enter = entrada_dpvo.get()
    descrip_enter = entrada_descrip.get()

    if ticket_enter == "":
        no_hay_ticket()
    else:
        try:
            mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
            mycursor = mysqldb.cursor()
            mycursor.execute("SELECT ticket FROM datos_incidencias2 where ticket=" + str(ticket_enter))
            records = mycursor.fetchone()
            numero_ticket = records[0]
            ttk.Label(hist_window, text="No. Ticekt: ", style="GW.TLabel").place(x=10, y=10)
            ttk.Label(hist_window, text="Status: ", style="GW.TLabel").place(x=10, y=40)
            ttk.Label(hist_window, text="Operador: ", style="GW.TLabel").place(x=10, y=70)
            ttk.Label(hist_window, text="Spacecraft", style="GW.TLabel").place(x=10, y=100)
            ttk.Label(hist_window, text="CCS: ", style="GW.TLabel").place(x=10, y=130)
            ttk.Label(hist_window, text="Tipo de falla: ", style="GW.TLabel").place(x=300, y=10)
            ttk.Label(hist_window, text="Componente: ", style="GW.TLabel").place(x=300, y=40)
            ttk.Label(hist_window, text="Comp Secundario: ", style="GW.TLabel").place(x=300, y=70)
            ttk.Label(hist_window, text="Dispositivo: ", style="GW.TLabel").place(x=300, y=100)
            ttk.Label(hist_window, text="Descripción de la falla: ", style="GW.TLabel").place(x=300, y=130)
            ttk.Label(hist_window, text="Fecha: ", style="GW.TLabel").place(x=590, y=10)
            ttk.Label(hist_window, text="Hora: ", style="GW.TLabel").place(x=590, y=40)
            ttk.Label(hist_window, text="File 1: ", style="GW.TLabel").place(x=870, y=10)
            ttk.Label(hist_window, text="File 2: ", style="GW.TLabel").place(x=870, y=40)
            ttk.Label(hist_window, text="File 3: ", style="GW.TLabel").place(x=870, y=70)
            ttk.Label(hist_window, text="File 4: ", style="GW.TLabel").place(x=870, y=100)
            ttk.Label(hist_window, text="File 5: ", style="GW.TLabel").place(x=1200, y=10)
            ttk.Label(hist_window, text="File 6: ", style="GW.TLabel").place(x=1200, y=40)
            ttk.Label(hist_window, text="File 7: ", style="GW.TLabel").place(x=1200, y=70)
            ttk.Label(hist_window, text="File 8: ", style="GW.TLabel").place(x=1200, y=100)
            ttk.Label(hist_window, text="File 9: ", style="GW.TLabel").place(x=1200, y=130)
            ttk.Label(hist_window, text="File 10: ", style="GW.TLabel").place(x=1200, y=160)
            ttk.Label(hist_window, text="Introduce una clave: ", style="GW.TLabel").place(x=100, y=190)

            variable_e1 = StringVar()
            variable_f1 = StringVar()
            optionmenu_e1 = OptionMenu(hist_window, variable_e1, *data4.keys())
            optionmenu_e1.config(width=25)
            optionmenu_e1.place(x=230, y=185)
            optionmenu_f1 = OptionMenu(hist_window, variable_f1, '')
            optionmenu_f1.config(width=32)
            optionmenu_f1.place(x=432, y=185)
            variable_e1.trace('w', update_options_F1)
            variable_e1.set('')
            variable_f1.set('')

            Button(hist_window, text="Aplicar", command=aplicar2, width=10).place(x=675, y=187)
            new_entrada_ticket = Entry(hist_window)
            new_entrada_ticket.place(x=140, y=10)
            new_entrada_status = Entry(hist_window)
            new_entrada_status.place(x=140, y=40)
            new_entrada_name = Entry(hist_window)
            new_entrada_name.place(x=140, y=70)
            new_entrada_sc = Entry(hist_window)
            new_entrada_sc.place(x=140, y=100)
            new_entrada_sitio = Entry(hist_window)
            new_entrada_sitio.place(x=140, y=130)
            new_entrada_tipo = Entry(hist_window)
            new_entrada_tipo.place(x=430, y=10)
            new_entrada_componente = Entry(hist_window)
            new_entrada_componente.place(x=430, y=40)
            new_entrada_componente2 = Entry(hist_window)
            new_entrada_componente2.place(x=430, y=70)
            new_entrada_dpvo = Entry(hist_window)
            new_entrada_dpvo.place(x=430, y=100)
            new_entrada_descrip = Entry(hist_window, width=60)
            new_entrada_descrip.place(x=430, y=130)
            new_entrada_date = Entry(hist_window)
            new_entrada_date.place(x=700, y=10)
            new_entrada_hora = Entry(hist_window)
            new_entrada_hora.place(x=700, y=40)
            new_entrada_file1 = Entry(hist_window, width=35)
            new_entrada_file1.place(x=950, y=10)
            new_entrada_file2 = Entry(hist_window, width=35)
            new_entrada_file2.place(x=950, y=40)
            new_entrada_file3 = Entry(hist_window, width=35)
            new_entrada_file3.place(x=950, y=70)
            new_entrada_file4 = Entry(hist_window, width=35)
            new_entrada_file4.place(x=950, y=100)
            new_entrada_file5 = Entry(hist_window, width=35)
            new_entrada_file5.place(x=1280, y=10)
            new_entrada_file6 = Entry(hist_window, width=35)
            new_entrada_file6.place(x=1280, y=40)
            new_entrada_file7 = Entry(hist_window, width=35)
            new_entrada_file7.place(x=1280, y=70)
            new_entrada_file8 = Entry(hist_window, width=35)
            new_entrada_file8.place(x=1280, y=100)
            new_entrada_file9 = Entry(hist_window, width=35)
            new_entrada_file9.place(x=1280, y=130)
            new_entrada_file10 = Entry(hist_window, width=35)
            new_entrada_file10.place(x=1280, y=160)
            if str(numero_ticket) == ticket_enter:
                Button(hist_window, text="Añadir seguimiento", command=seguimiento, width=20).place(x=870, y=190)
                Button(hist_window, text="Cerrar ticket", command=cerrar_t, width=20).place(x=870, y=130)
                Button(hist_window, text="Atrás", command=hacia_atras4, width=20).place(x=870, y=160)

                hist_window.protocol("WM_DELETE_WINDOW", handleProtocol)
                cols2 = (
                'registro', 'status', 'operador', 'spacecraft', 'ccs', 'tipo_falla', 'componente', 'componente2',
                'device', 'descripción',
                'date', 'hora', 'files', 'files2', 'files3', 'files4', 'files5', 'files6', 'files7', 'files8', 'files9',
                'files10')

                canvas = tkinter.Canvas(hist_window, height=285, width=1550, bg="red", borderwidth=5,
                                        background="#ffffff")
                frame11 = LabelFrame(canvas, text="= Listado de incidencias en el Centro de Control Satelital =",
                                     bg="red", bd=4, padx=5, pady=1, highlightcolor="green", height=280, width=4470)
                listBox2 = ttk.Treeview(frame11, columns=cols2, show='headings')
                vsb = ttk.Scrollbar(hist_window, orient="vertical", command=listBox2.yview)
                vsb.place(relx=0.978, rely=0.355, relheight=0.6, relwidth=0.03)
                listBox2.configure(yscrollcommand=vsb.set)

                hsb = tkinter.Scrollbar(hist_window, orient="horizontal", command=canvas.xview)
                canvas.configure(xscrollcommand=hsb.set)
                hsb.place(x=700, y=520)

                canvas.place(x=10, y=220)
                canvas.create_window((4, 4), window=frame11, anchor="nw")
                frame11.bind("<Configure>", lambda event, canvas=canvas: onFrameConfigure(canvas))

                for col in cols2:
                    listBox2.heading(col, text=col)
                    listBox2.grid(row=1, column=0, rowspan=2, ipady=1)
                    listBox2.place(x=10, y=10)

                mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
                mycursor = mysqldb.cursor()
                add_string = "ticket_no_"
                mycursor.execute(
                    "SELECT registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion, date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10 FROM " + add_string + str(
                        numero_ticket))
                print(numero_ticket)
                records2 = mycursor.fetchall()

                for i, (
                registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion,
                date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10) \
                        in enumerate(records2, start=1):
                    listBox2.insert("", "end", values=(
                        registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device,
                        descripcion, date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9,
                        files10))
                    # mysqldb.close()
                listBox2.bind('<Double-Button-1>', GetValue2)
            else:
                sin_coincidencia()
        except Exception as e:
            print(e)
            mysqldb.rollback()
            mysqldb.close()
            sin_coincidencia()


def cerrar_t():
    global ventana_cerrado
    ticket_enter2 = entrada_ticket.get()
    try:
        mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
        mycursor = mysqldb.cursor()
        stringg = "ticket_no_"
        mycursor.execute("select status from " + stringg + ticket_enter2 + " order by registro desc limit 1")
        record = mycursor.fetchone()
        cerrado = record[0]
        print(cerrado)
        if cerrado == "CERRADO":
            messagebox.showinfo("Esta incidencia ya estaba cerrada")
        else:
            mycursor.execute("Update datos_incidencias2 set status = 'CERRADO' where ticket=" + str(ticket_enter2))
            datos_operador = user_name

            datos_spacecraft = sc_enter
            datos_ccs = ccs_enter
            datos_tfalla = type_enter
            datos_componente = component_enter
            datos_componente2 = component2_enter
            datos_device = dpvo_enter
            datos_descripcion = descrip_enter
            now2 = datetime.now()
            datos_datec = now2.strftime("%Y-%m-%d")
            current_time3 = time.strftime("%H:%M:%S")
            files = entrada_file1
            files2 = entrada_file2
            files3 = entrada_file3
            files4 = entrada_file4
            files5 = entrada_file5
            files6 = entrada_file6
            files7 = entrada_file7
            files8 = entrada_file8
            files9 = entrada_file9
            files10 = entrada_file10

            # Agrega seguimiento de cierre al histórico de las incidencias cuando se cierra la misma.
            # Al tener como key de la tabla un campo Autoincremental y no nulo, si le pasamos como valor 0, el intérprete
            # Podrá asignar un valor consecutivo al de la última actualización reportada en el histórico:
            mycursor.execute("INSERT INTO " + stringg + ticket_enter2 + " VALUES(" + str(0) + ", 'CERRADO', '" + str(
                datos_operador) + "','"
                             + str(datos_spacecraft) + "','" + str(datos_ccs) + "','" + str(datos_tfalla) + "','" + str(
                datos_componente) + "','" + str(datos_componente2)
                             + "','" + str(datos_device) + "','" + str(datos_descripcion) + "','" + str(
                datos_datec) + "','" + str(current_time3) + "','" + str(files) + "','" + str(files2) + "','" + str(
                files3) + "','" + str(files4) + "','" + str(files5) + "','" + str(files6) + "','" + str(
                files7) + "','" + str(files8) + "','" + str(files9) + "','" + str(files10) + "')")

            mysqldb.commit()  # Actualizamos la bdd

            ventana_cerrado = Toplevel(ventana_login)
            ventana_cerrado.title("Informe de Operación")
            ventana_cerrado.geometry("230x150")
            ventana_cerrado.resizable(False, False)
            Label(ventana_cerrado, text="El ticket se cerró correctamente").pack()
            Button(ventana_cerrado, text="OK", command=cerrar_ventana).pack()
    except Exception as e:
        print(e)
        mysqldb.rollback()
        mysqldb.close()


def cerrar_ventana():
    hist_window.state(newstate='withdraw')
    ventana_cerrado.state(newstate='withdraw')
    ventana_decision.state(newstate='normal')
    ventana_decision.deiconify()


def no_hay_ticket():
    global ventana_no_ticket
    ventana_no_ticket = Tk()
    ventana_no_ticket.title("ERROR")
    ventana_no_ticket.geometry("315x100")
    ventana_no_ticket.resizable(False, False)
    Label(ventana_no_ticket, text="Porfavor selecciona un ticket haciendo doble click sobre el").pack()
    Button(ventana_no_ticket, text="OK", command=destroy_window).pack()
    ventana_no_ticket.protocol("WM_DELETE_WINDOW", handleProtocol)


def destroy_window():
    ventana_no_ticket.state(newstate='withdraw')
    try:
        rooot.state(newstate='normal')
        rooot.deiconify()
    except Exception as e:
        ventana_viss.state(newstate='normal')
        ventana_viss.deiconify()


def seguimiento():
    style = ttk.Style()
    style.configure("GW.TLabel", foreground="green", background="white")

    hist_window.state(newstate='withdraw')
    global seguimiento_win, now, no_ticket, descrip, entrada_txt, number_of_rows, max_number, img_png5, img_png6, img_png7, \
        photoimagex, frame3, frame4, archivo_abierto, archivo_abierto, archivo_abierto2, archivo_abierto4, archivo_abierto5, \
        archivo_abierto6, archivo_abierto7, archivo_abierto8, archivo_abierto9, archivo_abierto3, archivo_abierto10
    archivo_abierto = ""
    archivo_abierto2 = ""
    archivo_abierto3 = ""
    archivo_abierto4 = ""
    archivo_abierto5 = ""
    archivo_abierto6 = ""
    archivo_abierto7 = ""
    archivo_abierto8 = ""
    archivo_abierto9 = ""
    archivo_abierto10 = ""
    seguimiento_win = Toplevel(ventana_decision)
    seguimiento_win.geometry("990x511")
    seguimiento_win.title("Formato de Reporte de Fallas")
    seguimiento_win.resizable(False, False)  ## Especifica que la ventana no se puede ampliar
    # seguimiento_win.iconbitmap('tele_ico.ico')

    canv = Canvas(seguimiento_win, width=400, height=120, bg='red')
    canv.grid(row=0, column=2)
    canv2 = Canvas(seguimiento_win, width=300, height=120, bg='green')
    canv2.grid(row=0, column=1)
    canv3 = Canvas(seguimiento_win, width=280, height=120, bg='blue')
    canv3.grid(row=0, column=0)

    img_png5 = PhotoImage(file="comunicaciones_recortada.png")
    label_img = tkinter.Label(seguimiento_win, image=img_png5)
    label_img.place(x=594, y=10)
    img_png6 = PhotoImage(file="telecom.png")
    label_img2 = tkinter.Label(seguimiento_win, image=img_png6)
    label_img2.place(x=315, y=10)
    img_png7 = PhotoImage(file="mexsat.png")
    label_img3 = tkinter.Label(seguimiento_win, image=img_png7)
    label_img3.place(x=32, y=5)

    # Textos
    frame1 = LabelFrame(seguimiento_win, text="= Área de Sistemas =", bg="green", bd=4, padx=50, pady=15,
                        highlightcolor="blue", height=500)
    frame1.grid(row=1, column=0)
    frame2 = LabelFrame(seguimiento_win, text="Reporte de fallas", bg="blue", bd=4, height=350, width=300, padx=6,
                        pady=17, highlightcolor="green")
    frame2.grid(row=1, column=1)
    frame3 = LabelFrame(seguimiento_win, text="Reporte de fallas", bg="green", bd=4, height=350, width=300, padx=20,
                        pady=8, highlightcolor="green")
    frame3.grid(row=1, column=2)
    l3 = Label(frame1, text="No. de Seguimiento: ", anchor=E, font=("times", 13))
    l3.grid(row=13, column=0, sticky=E, pady=5)
    l3 = Label(frame1, text="Spacecraft:", anchor=E, font=("times", 13))
    l3.grid(row=14, column=0, sticky=E, pady=5)
    label_type = Label(frame1, text="Tipo:", anchor=E, font=("times", 13))
    label_type.grid(row=16, column=0, sticky=E, pady=5)
    label_dpvo = Label(frame1, text="Dispositivo:", anchor=E, font=("times", 13))
    label_dpvo.grid(row=18, column=0, sticky=E, pady=5)
    label_dpvo = Label(frame1, text="Dispositivo Secundario:", anchor=E, font=("times", 13))
    label_dpvo.grid(row=19, column=0, sticky=E, pady=5)
    label_dpvo = Label(frame1, text="", anchor=CENTER, bg="green", font=("times", 8))
    label_dpvo.grid(row=22, column=0, sticky=W, pady=5)
    label_name = Label(frame3, text="Operador: ", anchor=W)
    label_name.grid(row=15, column=0, sticky=W, pady=2)

    canvas = tkinter.Canvas(frame3, height=120, width=321, bg="yellow", borderwidth=5, background="#ffffff")
    frame4 = tkinter.Frame(canvas, background="#ffffff")

    photo = PhotoImage(file="add_file.png")
    photoimagex = photo.subsample(21, 21)
    boton = Button(frame4, text='', image=photoimagex, command=abrir_archivo, width=23)
    boton.grid(row=0, column=0)

    vsb = tkinter.Scrollbar(frame3, orient="vertical", command=canvas.yview)
    canvas.configure(yscrollcommand=vsb.set)
    hsb = tkinter.Scrollbar(frame3, orient="horizontal", command=canvas.xview)
    canvas.configure(xscrollcommand=hsb.set)

    vsb.grid(row=12, column=1, sticky=W)
    hsb.grid(row=13, column=0)
    canvas.grid(row=12, column=0)
    canvas.create_window((4, 4), window=frame4, anchor="nw")
    frame4.bind("<Configure>", lambda event, canvas=canvas: onFrameConfigure(canvas))
    global label_file, label_file1, label_file2, label_file3, label_file4, label_file5, label_file6, label_file7, \
        label_file8, label_file9

    label_file = Label(frame4, text="Seleccione archivos asociados (Máximo 10)", font=("times", 10), bg="yellow",
                       anchor=CENTER)
    label_file.grid(row=0, column=1)
    label_file1 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file1.grid(row=1, column=1)
    label_file2 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file2.grid(row=2, column=1)
    label_file3 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file3.grid(row=3, column=1)
    label_file4 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file4.grid(row=4, column=1)

    label_file5 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file5.grid(row=5, column=1)
    label_file6 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file6.grid(row=6, column=1)
    label_file7 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file7.grid(row=7, column=1)
    label_file8 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file8.grid(row=8, column=1)
    label_file9 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file9.grid(row=9, column=1)
    label_name = Label(frame3, text=user_name, font=("times", 15), anchor=CENTER)
    label_name.grid(row=19, column=0, pady=2)

    l4 = Label(frame1, text="Componente: ", anchor=E, font=("times", 13))
    l4.grid(row=17, column=0, sticky=E, pady=5)

    l5 = Label(frame1, text="Descripción de la falla:", anchor=E, font=("times", 13))
    l5.grid(row=20, column=0, sticky=E, pady=5)

    Button(frame1, text="Atrás", command=hacia_atras7).grid(row=23, column=0)

    l6 = Label(frame1, text="Sitio:", anchor=E, font=("times", 13))
    l6.grid(row=15, column=0, sticky=E, pady=5)

    l7 = Label(frame3, text="Hora actual:", anchor=W)
    l7.grid(row=20, column=0, sticky=W, pady=2)

    l1 = Label(frame3, text="Fecha: ", anchor=W)
    l1.grid(row=23, column=0, sticky=W, pady=2)
    now = datetime.now()

    l7 = Label(frame3, text=now.strftime("%Y-%m-%d"), font=("times", 16), anchor=CENTER)
    l7.grid(row=24, column=0, pady=2)

    no_ticket = StringVar()
    descrip = StringVar()
    try:
        db = MySQLdb.connect(host="localhost", user="root", password="313218479", database="mydb")
        cursor = db.cursor()
        cursor.execute("SELECT max(registro) FROM ticket_no_" + ticket_enter)
        myresult = cursor.fetchone()
        # Debe de haber una incidencia para poder tomar la referencia
        max_number = myresult[0] + 1
        no_ticket = max_number
    except Exception as e:
        print(e)
        max_number = 1
        no_ticket = max_number
        """
        mysqldb = mysql.connector.connect(host="localhost", user="seguimiento_win", password="313218479", database="mydb")  # Conectmydb
        mycursor = mysqldb.cursor()  # nos posicionamos en la base de datos
        mycursor.execute("INSERT INTO datos_incidencias2 VALUES (" + str(0) + ", 'Cerrado', 'Eduardo Calderón', 'MX3', "
                                                                             "'Iztapalapa', 'Registro de', "
                                                                             "'prueba, Sin este', 'registro la', 'base truena',"
                                                                             " 'no eliminar', '2021-10-10', '10:11:12')")
        db = MySQLdb.connect(host="localhost", user="seguimiento_win", password="313218479", database="mydb")
        cursor = db.cursor()
        cursor.execute("SELECT max(ticket) FROM datos_incidencias2")
        myresult = cursor.fetchone()
        # Debe de haber una incidencia para poder tomar la referencia
        max_number = myresult[0] + 1
        no_ticket = max_number"""

    entrada_ticket = Label(frame2, text=no_ticket, font=("times", 13))
    entrada_ticket.grid(row=13, column=1, sticky=W, pady=2)

    scrollbar = tkinter.Scrollbar(frame2, orient=tkinter.HORIZONTAL)
    scrollbar.grid(row=21, column=1)
    scrollbarv = tkinter.Scrollbar(frame2, orient=tkinter.VERTICAL)
    scrollbarv.grid(row=20, column=2, sticky=E)

    entrada_txt = tkinter.Text(frame2, wrap="none", xscrollcommand=scrollbar.set, yscrollcommand=scrollbarv.set,
                               width=33, relief=SUNKEN, height=4)
    entrada_txt.grid(row=20, column=1)

    scrollbar.config(command=entrada_txt.xview)
    scrollbarv.config(command=entrada_txt.yview)

    global entrada_ccs, entrada_spacecraft, var_spacecraft, variable_a, variable_b, variable_c, variable_d, \
        optionmenu_b, optionmenu_c, optionmenu_d, var_ccs, optionmenu_a

    var_ccs = tkinter.StringVar(seguimiento_win)
    var_ccs.set('')
    opc_ccs = ['Iztapalapa', 'Hermosillo']
    entrada_ccs = tkinter.OptionMenu(frame2, var_ccs, *opc_ccs)
    entrada_ccs.grid(row=15, column=1, sticky=W, pady=2)

    var_spacecraft = tkinter.StringVar()
    var_spacecraft.set('')
    opc_spacecraft = ['MX2', 'MX3']
    entrada_spacecraft = tkinter.OptionMenu(frame2, var_spacecraft, *opc_spacecraft)
    entrada_spacecraft.grid(row=14, column=1, sticky=W, pady=2)

    variable_a = StringVar()
    variable_b = StringVar()
    variable_c = StringVar()
    variable_d = StringVar()

    optionmenu_a = OptionMenu(frame2, variable_a, *data.keys())
    optionmenu_a.config(width=32)
    optionmenu_b = OptionMenu(frame2, variable_b, '')
    optionmenu_b.config(width=32)
    optionmenu_c = OptionMenu(frame2, variable_c, '')
    optionmenu_c.config(width=32)
    optionmenu_d = OptionMenu(frame2, variable_d, '')
    optionmenu_d.config(width=32)

    variable_a.trace('w', update_options_B)
    variable_b.trace('w', update_options_C)
    variable_c.trace('w', update_options_D)

    variable_a.set('')
    variable_b.set('')
    variable_c.set('')
    variable_d.set('')

    optionmenu_a.grid(row=16, column=1, sticky=W, pady=2)
    optionmenu_b.grid(row=17, column=1, sticky=W, pady=2)
    optionmenu_c.grid(row=18, column=1, sticky=W, pady=2)
    optionmenu_d.grid(row=19, column=1, sticky=W, pady=2)
    times()
    seguimiento_win.protocol("WM_DELETE_WINDOW", handleProtocol)
    Button(frame3, text="Registrar", width=10, command=registro_incidencia2).grid(row=25,
                                                                                  column=0)  # BOTÓN "Registrarse"
    # Frame(seguimiento_win, height=24, width=400, bg='red').grid(row=14, column=2)


def update():  # Entradas con los datos de la incidencia a modificar
    tick = entrada_ticket.get()  # ticket
    stat = entrada_status.get()  # status
    spacecraft = entrada_sc.get()  # satélite
    ccs = entrada_sitio.get()  # sitio
    falla_type = entrada_tipo.get()  # Hardware o Software
    comp = entrada_componente.get()  # Componente principal
    comp2 = entrada_componente2.get()  # componente secundario
    device = entrada_dpvo.get()  # dispositivo
    desc = entrada_descrip.get()  # descripción en txt
    date = entrada_date.get()  # fecha: AAAA-MM-DD
    hora = entrada_hora.get()  # Hora: HH:MM:SS
    file = entrada_file1.get()
    file2 = entrada_file2.get()
    file3 = entrada_file3.get()
    file4 = entrada_file4.get()
    file5 = entrada_file5.get()
    file6 = entrada_file6.get()
    file7 = entrada_file7.get()
    file8 = entrada_file8.get()
    file9 = entrada_file9.get()
    file10 = entrada_file10.get()
    # Conectamos con la base de datos con las credenciales respectiva
    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
    mycursor = mysqldb.cursor()
    try:  # Intentamos aplicar la sentencia Update a cualquiera de los parámetros del registro donde el ticket coincide
        sql = "Update datos_incidencias2 set status= %s, operador= %s, spacecraft= %s, ccs= %s, tipo_falla = %s, componente = %s, " \
              "componente2 = %s, device = %s, descripcion= %s, date= %s, hora= %s, files=%s, files2=%s, files3=%s, files4=%s, files5=%s, files6=%s, files7=%s, files8=%s, files9=%s, files10=%s where ticket= %s"
        val = (
        stat, user_name, spacecraft, ccs, falla_type, comp, comp2, device, desc, date, hora, file, file2, file3, file4,
        file5, file6, file7, file8, file9, file10, tick)
        mycursor.execute(sql, val)
        mysqldb.commit()
        prefix = "ticket_no_"

        mycursor.execute("INSERT INTO " + prefix + tick + " VALUES(" + str(0) + ", '" + stat + "', '" + user_name
                         + "', '" + spacecraft + "', '" + ccs + "', '" + falla_type + "', '" + comp + "', '" + comp2 + "', '"
                         + device + "', '" + desc + "', '" + date + "', '" + hora + "', '" + file + "', '" + file2 + "', '" + file3 + "', '" + file4 + "', '" + file5 + "', '" + file6 + "', '" + file7 + "', '" + file8 + "', '" + file9 + "', '" + file10 + "')")
        mysqldb.commit()  # Actualizamos al momento la bdd para ver reflejados los cambios instantáneamente
        messagebox.showinfo("information", "Record Updated successfully..")
        # Limpiamos las entradas para confirmar la actualización
        entrada_ticket.delete(0, END)
        entrada_status.delete(0, END)
        entrada_name.delete(0, END)
        entrada_sc.delete(0, END)
        entrada_sitio.delete(0, END)
        entrada_tipo.delete(0, END)
        entrada_componente.delete(0, END)
        entrada_componente2.delete(0, END)
        entrada_dpvo.delete(0, END)
        entrada_descrip.delete(0, END)
        entrada_date.delete(0, END)
        entrada_hora.delete(0, END)
        entrada_file1.delete(0, END)
        entrada_file2.delete(0, END)
        entrada_file3.delete(0, END)
        entrada_file4.delete(0, END)
        entrada_file5.delete(0, END)
        entrada_file6.delete(0, END)
        entrada_file7.delete(0, END)
        entrada_file8.delete(0, END)
        entrada_file9.delete(0, END)
        entrada_file10.delete(0, END)
        rooot.state(newstate='withdraw')
        ventana_decision.state(newstate='normal')
        ventana_decision.deiconify()

        entrada_ticket.focus_set()
    except Exception as e:
        print(e)
        mysqldb.rollback()
        mysqldb.close()


def delete():
    tick = entrada_ticket.get()
    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
    mycursor = mysqldb.cursor()
    try:
        sql = "delete from datos_incidencias2 where ticket = %s"
        val = (tick,)
        mycursor.execute(sql, val)
        mysqldb.commit()
        # lastid = mycursor.lastrowid
        messagebox.showinfo("information", "Record Deleteee successfully...")
        entrada_ticket.delete(0, END)
        entrada_status.delete(0, END)
        entrada_name.delete(0, END)
        entrada_sc.delete(0, END)
        entrada_sitio.delete(0, END)
        entrada_tipo.delete(0, END)
        entrada_componente.delete(0, END)
        entrada_componente2.delete(0, END)
        entrada_dpvo.delete(0, END)
        entrada_descrip.delete(0, END)
        entrada_date.delete(0, END)
        entrada_hora.delete(0, END)
        entrada_ticket.focus_set()
        entrada_file1.delete(0, END)
        entrada_file2.delete(0, END)
        entrada_file3.delete(0, END)
        entrada_file4.delete(0, END)
        entrada_file5.delete(0, END)
        entrada_file6.delete(0, END)
        entrada_file7.delete(0, END)
        entrada_file8.delete(0, END)
        entrada_file9.delete(0, END)
        entrada_file10.delete(0, END)
    except Exception as e:
        print(e)
        mysqldb.rollback()
        mysqldb.close()


def aplicar():
    global listBox, myresult
    cols = ('ticket', 'status', 'operador', 'spacecraft', 'ccs', 'tipo_falla', 'componente', 'componente2', 'device',
            'descripción',
            'date', 'hora', 'files', 'files2', 'files3', 'files4', 'files5', 'files6', 'files7', 'files8', 'files9',
            'files10')
    try:
        listBox = ttk.Treeview(frame1, columns=cols, show='headings')
    except Exception as e:
        print(e)
        listBox = ttk.Treeview(ventana_viss, columns=cols, show='headings')
    for col in cols:
        listBox.heading(col, text=col)
        listBox.place(x=10, y=10)

    data = variable_e.get()
    operador = variable_f.get()
    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
    mycursor = mysqldb.cursor()
    try:
        if (data != ""):
            if (operador != ""):
                mycursor.execute("SELECT * FROM datos_incidencias2 where " + data + " = '" + operador + "'")
                myresult = mycursor.fetchall()
            else:
                messagebox.showinfo("Ingrese un parámetro de búsqueda")
        else:
            messagebox.showinfo("Ingrese un campo de búsqueda")
    except Exception as e:
        print(e)
    try:
        for z, (
                ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion,
                date,
                hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10) in enumerate(
            myresult, start=1):
            listBox.insert("", "end", values=(
                ticket, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device,
                descripcion, date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9,
                files10))
        try:
            vsb = ttk.Scrollbar(rooot, orient="vertical", command=listBox.yview)
        except Exception as e:
            vsb = ttk.Scrollbar(ventana_viss, orient="vertical", command=listBox.yview)
        vsb.place(relx=0.978, rely=0.355, relheight=0.600, relwidth=0.030)
        listBox.configure(yscrollcommand=vsb.set)
        variable_f.set('')
        listBox.bind('<Double-Button-1>', GetValue)

    except Exception as e:
        print(e)
        print("no hay coincidencias")
        mysqldb.rollback()
        mysqldb.close()


def aplicar2():
    global myresult, listBox2
    cols = ('registro', 'status', 'operador', 'spacecraft', 'ccs', 'tipo_falla', 'componente', 'componente2', 'device',
            'descripción',
            'date', 'hora', 'files', 'files2', 'files3', 'files4', 'files5', 'files6', 'files7', 'files8', 'files9',
            'files10')
    listBox2 = ttk.Treeview(frame11, columns=cols, show='headings')
    for col in cols:
        listBox2.heading(col, text=col)
        listBox2.place(x=10, y=10)

    data = variable_e1.get()
    operador = variable_f1.get()
    no_ticket = entrada_ticket.get()

    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")
    mycursor = mysqldb.cursor()
    try:
        if (data != ""):
            if (operador != ""):
                mycursor.execute("SELECT * FROM ticket_no_" + no_ticket + " where " + data + " = '" + operador + "'")
                myresult = mycursor.fetchall()
            else:
                messagebox.showinfo("Ingrese un parámetro de búsqueda")
        else:
            messagebox.showinfo("Ingrese un campo de búsqueda")
    except Exception as e:
        print(e)
    try:
        for z, (
                registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion,
                date,
                hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10) in enumerate(
            myresult, start=1):
            listBox2.insert("", "end", values=(
                registro, status, operador, spacecraft, ccs, tipo_falla, componente, componente2, device, descripcion,
                date, hora, files, files2, files3, files4, files5, files6, files7, files8, files9, files10))

        vsb = ttk.Scrollbar(hist_window, orient="vertical", command=listBox2.yview)
        vsb.place(relx=0.978, rely=0.355, relheight=0.600, relwidth=0.030)
        listBox2.configure(yscrollcommand=vsb.set)
        variable_f1.set('')
        listBox2.bind('<Double-Button-1>', GetValue2)
    except Exception as e:
        print(e)
        mysqldb.rollback()
        mysqldb.close()


def verifica_login():
    global user_name
    user_name = StringVar()
    user_name = verifica_usuario.get()

    gestor_sesiones = sessionmaker()
    gestor_sesiones.configure(bind=engine)
    sesion = gestor_sesiones()
    clave1 = verifica_clave.get()
    entrada_login_usuario.delete(0, END)  # BORRA INFORMACIÓN DEL CAMPO "Nombre usuario *" AL MOSTRAR NUEVA VENTANA.
    entrada_login_clave.delete(0, END)  # BORRA INFORMACIÓN DEL CAMPO "Contraseña *" AL MOSTRAR NUEVA VENTANA.
    ##############################################   bdd  =  Mysql   #####################################
    if sesion.query(User).filter_by(name=user_name):
        if sesion.query(User).filter_by(password=clave1).all:
            print(user_name)
            decision()
        else:
            no_clave()
    else:
        print(clave1)
        no_usuario()

    """
    lista_archivos = os.listdir()  # GENERA LISTA DE ARCHIVOS UBICADOS EN EL DIRECTORIO.

     # SI EL NOMBRE SE ENCUENTRA EN LA LISTA DE ARCHIVOS..
     if usuario1 in lista_archivos:
         archivo1 = open(usuario1, "r")  # APERTURA DE ARCHIVO EN MODO LECTURA
         verifica = archivo1.read().splitlines()  # LECTURA DEL ARCHIVO QUE CONTIENE EL nombre Y contraseña.
         # SI LA CONTRASEÑA INTRODUCIDA SE ENCUENTRA EN EL ARCHIVO...
         if clave1 in verifica:
             exito_login()  # ...EJECUTAR FUNCIÓN "exito_login()"
         # SI LA CONTRASEÑA NO SE ENCUENTRA EN EL ARCHIVO....
         else:
             no_clave()  # ...EJECUTAR "no_clave()"
     else:
         no_usuario()  # ..EJECUTA "no_usuario()"."""
    ########################################################################################
    # VENTANA "Login finalizado con exito".


# global rutas_files
# rutas_files=[]
def quitar_path():
    label_file.configure(text="Seleccione archivos asociados (Máximo 10)")
    label_file.grid(row=0, column=1)
    buton_gar3.grid_forget()
    if (label_file1.cget('text') == ""):
        buton_file.destroy()
    else:
        pass
    # rutas_files.pop(0)
    # rutas_files.insert(0, 0)


def quitar_path1():
    label_file1.configure(text="")
    label_file1.grid(row=1, column=1)
    buton_gar2.grid_forget()
    if (label_file2.cget('text') == ""):
        buton_file2.destroy()
    else:
        pass


def quitar_path2():
    label_file2.configure(text="")
    label_file2.grid(row=2, column=1)
    buton_gar.grid_forget()


def quitar_path3():
    label_file3.configure(text="")
    label_file3.grid(row=3, column=1)
    buton_garb.grid_forget()


def quitar_path4():
    label_file4.configure(text="")
    label_file4.grid(row=4, column=1)
    buton_garba.grid_forget()


def quitar_path5():
    label_file5.configure(text="")
    label_file5.grid(row=5, column=1)
    buton_garbag.grid_forget()


def quitar_path6():
    label_file6.configure(text="")
    label_file6.grid(row=6, column=1)
    buton_garbage.grid_forget()


def quitar_path7():
    label_file7.configure(text="")
    label_file7.grid(row=7, column=1)
    buton_garbage_.grid_forget()


def quitar_path8():
    label_file8.configure(text="")
    label_file8.grid(row=8, column=1)
    buton_garbage_c.grid_forget()


def quitar_path9():
    label_file9.configure(text="")
    label_file9.grid(row=9, column=1)
    buton_garbage_co.grid_forget()


def abrir_archivo10():
    global photoimage15, buton_garbage_co, photoimage40, archivo_abierto10
    archivo_abierto10 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                   filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file9.configure(text="File 10: " + archivo_abierto10)
    label_file9.grid(row=9, column=1)
    photo = PhotoImage(file="garbage_collector1.png")
    photoimage15 = photo.subsample(18, 18)
    buton_garbage_co = Button(frame4, text='', image=photoimage15, command=quitar_path9, width=25)
    buton_garbage_co.grid(row=9, column=2, sticky=E)


def abrir_archivo9():
    global photoimage14, buton_garbage_c, photoimage40, buton_file9, archivo_abierto9
    archivo_abierto9 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file8.configure(text="File 9: " + archivo_abierto9)
    label_file8.grid(row=8, column=1)
    photo = PhotoImage(file="garbage_collector9.png")
    photoimage14 = photo.subsample(18, 18)
    buton_garbage_c = Button(frame4, text='', image=photoimage14, command=quitar_path8, width=25)
    buton_garbage_c.grid(row=8, column=2, sticky=E)

    photo = PhotoImage(file="add_file9.png")
    photoimage40 = photo.subsample(21, 21)
    buton_file9 = Button(frame4, text='', image=photoimage40, command=abrir_archivo10, width=23)
    buton_file9.grid(row=9, column=0, sticky=W)


def abrir_archivo8():
    global photoimage13, buton_garbage_, buton_file8, photoimage39, archivo_abierto8
    archivo_abierto8 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file7.configure(text="File 8: " + archivo_abierto8)
    label_file7.grid(row=7, column=1)
    photo = PhotoImage(file="garbage_collector8.png")
    photoimage13 = photo.subsample(18, 18)
    buton_garbage_ = Button(frame4, text='', image=photoimage13, command=quitar_path7, width=25)
    buton_garbage_.grid(row=7, column=2, sticky=E)

    photo = PhotoImage(file="add_file8.png")
    photoimage39 = photo.subsample(21, 21)
    buton_file8 = Button(frame4, text='', image=photoimage39, command=abrir_archivo9, width=23)
    buton_file8.grid(row=8, column=0, sticky=W)


def abrir_archivo7():
    global photoimage12, buton_garbage, buton_file7, photoimage38, archivo_abierto7
    archivo_abierto7 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file6.configure(text="File 7: " + archivo_abierto7)
    label_file6.grid(row=6, column=1)
    photo2 = PhotoImage(file="garbage_collector7.png")
    photoimage12 = photo2.subsample(18, 18)
    buton_garbage = Button(frame4, text='', image=photoimage12, command=quitar_path6, width=25)
    buton_garbage.grid(row=6, column=2, sticky=E)

    photo3 = PhotoImage(file="add_file7.png")
    photoimage38 = photo3.subsample(21, 21)
    buton_file7 = Button(frame4, text='', image=photoimage38, command=abrir_archivo8, width=23)
    buton_file7.grid(row=7, column=0, sticky=W)


def abrir_archivo6():
    global photoimage11, buton_garbag, buton_file6, photoimage37, archivo_abierto6
    archivo_abierto6 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file5.configure(text="File 6: " + archivo_abierto6)
    label_file5.grid(row=5, column=1)
    photo = PhotoImage(file="garbage_collector6.png")
    photoimage11 = photo.subsample(18, 18)
    buton_garbag = Button(frame4, text='', image=photoimage11, command=quitar_path5, width=25)
    buton_garbag.grid(row=5, column=2, sticky=E)

    photo = PhotoImage(file="add_file6.png")
    photoimage37 = photo.subsample(21, 21)
    buton_file6 = Button(frame4, text='', image=photoimage37, command=abrir_archivo7, width=23)
    buton_file6.grid(row=6, column=0, sticky=W)


def abrir_archivo5():
    global photoimage10, buton_garba, photoimage36, buton_file5, archvio_abierto5
    archivo_abierto5 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file4.configure(text="File 5: " + archivo_abierto5)
    label_file4.grid(row=4, column=1)
    photo = PhotoImage(file="garbage_collector5.png")
    photoimage10 = photo.subsample(18, 18)
    buton_garba = Button(frame4, text='', image=photoimage10, command=quitar_path4, width=25)
    buton_garba.grid(row=4, column=2, sticky=E)

    photo = PhotoImage(file="add_file5.png")
    photoimage36 = photo.subsample(21, 21)
    buton_file5 = Button(frame4, text='', image=photoimage36, command=abrir_archivo6, width=23)
    buton_file5.grid(row=5, column=0, sticky=W)


def abrir_archivo4():
    global photoimage9, buton_garb, buton_file4, photoimage35, archivo_abierto4
    archivo_abierto4 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file3.configure(text="File 4: " + archivo_abierto4)
    label_file3.grid(row=3, column=1)
    photo = PhotoImage(file="garbage_collector4.png")
    photoimage9 = photo.subsample(18, 18)
    buton_garb = Button(frame4, text='', image=photoimage9, command=quitar_path3, width=25)
    buton_garb.grid(row=3, column=2, sticky=E)

    photo = PhotoImage(file="add_file4.png")
    photoimage35 = photo.subsample(21, 21)
    buton_file4 = Button(frame4, text='', image=photoimage35, command=abrir_archivo5, width=23)
    buton_file4.grid(row=4, column=0, sticky=W)


def abrir_archivo3():
    global photoimage8, buton_gar, photoimage34, buton_file3, archivo_abierto3
    archivo_abierto3 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file2.configure(text="File 3: " + archivo_abierto3)
    label_file2.grid(row=2, column=1)
    photo = PhotoImage(file="garbage_collector3.png")
    photoimage8 = photo.subsample(18, 18)
    # try:
    buton_gar = Button(frame4, text='', image=photoimage8, command=quitar_path2, width=25)
    buton_gar.grid(row=2, column=2, sticky=E)

    photo = PhotoImage(file="add_file3.png")
    photoimage34 = photo.subsample(21, 21)
    buton_file3 = Button(frame4, text='', image=photoimage34, command=abrir_archivo4, width=23)
    buton_file3.grid(row=3, column=0, sticky=W)
    # except Exception as e:
    #    buton_gar = Button(seguimiento_win, text='', image=photoimage8, command=quitar_path2, width=25)
    #    buton_gar.grid(row=23, column=2, sticky=E)


def abrir_archivo2():
    global photoimage7, photoimage33, buton_gar2, buton_file2, archivo_abierto2
    archivo_abierto2 = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                  filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file1.configure(text="File 2: " + archivo_abierto2)
    label_file1.grid(row=1, column=1)
    photo = PhotoImage(file="garbage_collector2.png")
    photoimage7 = photo.subsample(18, 18)
    buton_gar2 = Button(frame4, text='', image=photoimage7, command=quitar_path1, width=25)
    buton_gar2.grid(row=1, column=2, sticky=E)

    photo = PhotoImage(file="add_file2.png")
    photoimage33 = photo.subsample(21, 21)
    buton_file2 = Button(frame4, text='', image=photoimage33, command=abrir_archivo3, width=23)
    buton_file2.grid(row=2, column=0, sticky=W)


def abrir_archivo():
    global datos3, photoimage2, photoimage3, photoimage4, buton_gar3, buton_file, archivo_abierto
    archivo_abierto = filedialog.askopenfilename(initialdir="/", title="Seleccione un archivo",
                                                 filetypes=(("all files", "*.*"), ("jpeg files", "*.jpg")))
    label_file.configure(text="File 1: " + archivo_abierto)
    label_file.grid(row=0, column=1)

    photo = PhotoImage(file="garbage_collector.png")
    photoimage2 = photo.subsample(18, 18)
    buton_gar3 = Button(frame4, text='', image=photoimage2, command=quitar_path, width=25)
    buton_gar3.grid(row=0, column=2, sticky=E)

    photo = PhotoImage(file="add_file1.png")
    photoimage3 = photo.subsample(21, 21)
    buton_file = Button(frame4, text='', image=photoimage3, command=abrir_archivo2, width=23)
    buton_file.grid(row=1, column=0, sticky=W)


def onFrameConfigure(canvas):
    canvas.configure(scrollregion=canvas.bbox("all"))


def exito_login():
    style = ttk.Style()
    style.configure("GW.TLabel", foreground="green", background="white")

    ventana_decision.state(newstate='withdraw')
    global root, now, no_ticket, descrip, entrada_txt, number_of_rows, max_number, img_png5, img_png6, img_png7, \
        photoimagex, frame3, frame4, archivo_abierto, archivo_abierto, archivo_abierto, archivo_abierto2, \
        archivo_abierto4, archivo_abierto5, archivo_abierto6, archivo_abierto7, archivo_abierto8, archivo_abierto9, \
        archivo_abierto3, archivo_abierto10
    archivo_abierto = ""
    archivo_abierto2 = ""
    archivo_abierto3 = ""
    archivo_abierto4 = ""
    archivo_abierto5 = ""
    archivo_abierto6 = ""
    archivo_abierto7 = ""
    archivo_abierto8 = ""
    archivo_abierto9 = ""
    archivo_abierto10 = ""

    root = Toplevel(ventana_decision)
    root.geometry("990x511")
    root.title("Formato de Reporte de Fallas")
    # root.resizable(False, False)  ## Especifica que la ventana no se puede ampliar
    root.iconbitmap('tele_ico.ico')

    canv = Canvas(root, width=400, height=120, bg='red')
    canv.grid(row=0, column=2)
    canv2 = Canvas(root, width=300, height=120, bg='green')
    canv2.grid(row=0, column=1)
    canv3 = Canvas(root, width=280, height=120, bg='blue')
    canv3.grid(row=0, column=0)

    img_png5 = PhotoImage(file="comunicaciones_recortada.png")
    label_img = tkinter.Label(root, image=img_png5)
    label_img.place(x=594, y=10)
    img_png6 = PhotoImage(file="telecom.png")
    label_img2 = tkinter.Label(root, image=img_png6)
    label_img2.place(x=315, y=10)
    img_png7 = PhotoImage(file="mexsat.png")
    label_img3 = tkinter.Label(root, image=img_png7)
    label_img3.place(x=32, y=5)
    # Frames:
    frame1 = LabelFrame(root, text="= Área de Sistemas =", bg="green", bd=4, padx=50, pady=15, highlightcolor="blue",
                        height=500)
    frame1.grid(row=1, column=0)
    frame2 = LabelFrame(root, text="= Reporte de fallas =", bg="blue", bd=4, height=350, width=300, padx=6, pady=17,
                        highlightcolor="green")
    frame2.grid(row=1, column=1)
    frame3 = LabelFrame(root, text="= Archivos Asociados a la falla: =", bg="green", bd=4, height=350, width=300,
                        padx=20, pady=8, highlightcolor="green")
    frame3.grid(row=1, column=2)
    # Textos:
    l3 = Label(frame1, text="No. de Ticket: ", anchor=E, font=("times", 13)).grid(row=13, column=0, sticky=E, pady=5)
    l3 = Label(frame1, text="Spacecraft:", anchor=E, font=("times", 13)).grid(row=14, column=0, sticky=E, pady=5)
    label_type = Label(frame1, text="Tipo:", anchor=E, font=("times", 13)).grid(row=16, column=0, sticky=E, pady=5)
    label_dpvo = Label(frame1, text="Dispositivo:", anchor=E, font=("times", 13)).grid(row=18, column=0, sticky=E,
                                                                                       pady=5)
    label_dpvo = Label(frame1, text="Dispositivo Secundario:", anchor=E, font=("times", 13)).grid(row=19, column=0,
                                                                                                  sticky=E, pady=5)
    label_dpvo = Label(frame1, text="", anchor=CENTER, bg="green", font=("times", 8)).grid(row=22, column=0, sticky=W,
                                                                                           pady=5)
    label_name = Label(frame3, text="Operador: ", anchor=W).grid(row=15, column=0, sticky=W, pady=2)

    canvas = tkinter.Canvas(frame3, height=120, width=321, bg="yellow", borderwidth=5, background="#ffffff")
    frame4 = tkinter.Frame(canvas, background="#ffffff")

    photo = PhotoImage(file="add_file.png")
    photoimagex = photo.subsample(21, 21)
    boton = Button(frame4, text='', image=photoimagex, command=abrir_archivo, width=23)
    boton.grid(row=0, column=0)

    vsb = tkinter.Scrollbar(frame3, orient="vertical", command=canvas.yview)
    canvas.configure(yscrollcommand=vsb.set)
    hsb = tkinter.Scrollbar(frame3, orient="horizontal", command=canvas.xview)
    canvas.configure(xscrollcommand=hsb.set)

    vsb.grid(row=12, column=1, sticky=W)
    hsb.grid(row=13, column=0)
    canvas.grid(row=12, column=0)
    canvas.create_window((4, 4), window=frame4, anchor="nw")
    frame4.bind("<Configure>", lambda event, canvas=canvas: onFrameConfigure(canvas))

    global label_file, label_file1, label_file2, label_file3, label_file4, label_file5, label_file6, label_file7, \
        label_file8, label_file9

    label_file = Label(frame4, text="Seleccione archivos asociados (Máximo 10)", font=("times", 10), bg="yellow",
                       anchor=CENTER)
    label_file.grid(row=0, column=1)
    label_file1 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file1.grid(row=1, column=1)
    label_file2 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file2.grid(row=2, column=1)
    label_file3 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file3.grid(row=3, column=1)
    label_file4 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file4.grid(row=4, column=1)

    label_file5 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file5.grid(row=5, column=1)
    label_file6 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file6.grid(row=6, column=1)
    label_file7 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file7.grid(row=7, column=1)
    label_file8 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file8.grid(row=8, column=1)
    label_file9 = Label(frame4, text="", font=("times", 10), bg="white", anchor=W)
    label_file9.grid(row=9, column=1)

    label_name = Label(frame3, text=user_name, font=("times", 15), anchor=CENTER)
    label_name.grid(row=19, column=0, pady=2)

    l4 = Label(frame1, text="Componente: ", anchor=E, font=("times", 13))
    l4.grid(row=17, column=0, sticky=E, pady=5)

    l5 = Label(frame1, text="Descripción de la falla:", anchor=E, font=("times", 13))
    l5.grid(row=20, column=0, sticky=E, pady=5)

    Button(frame1, text="Atrás", command=hacia_atras6).grid(row=23, column=0)

    l6 = Label(frame1, text="Sitio:", anchor=E, font=("times", 13))
    l6.grid(row=15, column=0, sticky=E, pady=5)

    l7 = Label(frame3, text="Hora actual:", anchor=W)
    l7.grid(row=20, column=0, sticky=W, pady=2)

    l1 = Label(frame3, text="Fecha: ", anchor=W)
    l1.grid(row=23, column=0, sticky=W, pady=2)
    now = datetime.now()

    l7 = Label(frame3, text=now.strftime("%Y-%m-%d"), font=("times", 16), anchor=CENTER)
    l7.grid(row=24, column=0, pady=2)

    no_ticket = StringVar()
    descrip = StringVar()
    try:
        db = MySQLdb.connect(host="localhost", user="root", password="313218479", database="mydb")
        cursor = db.cursor()
        cursor.execute("SELECT max(ticket) FROM datos_incidencias2")
        myresult = cursor.fetchone()
        # Debe de haber una incidencia para poder tomar la referencia
        max_number = myresult[0] + 1
        no_ticket = max_number
    except Exception as e:
        print(e)
        max_number = 1
        no_ticket = max_number
        """
        mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479", database="mydb")  # Conectmydb
        mycursor = mysqldb.cursor()  # nos posicionamos en la base de datos
        mycursor.execute("INSERT INTO datos_incidencias2 VALUES (" + str(0) + ", 'Cerrado', 'Eduardo Calderón', 'MX3', "
                                                                             "'Iztapalapa', 'Registro de', "
                                                                             "'prueba, Sin este', 'registro la', 'base truena',"
                                                                             " 'no eliminar', '2021-10-10', '10:11:12')")
        db = MySQLdb.connect(host="localhost", user="root", password="313218479", database="mydb")
        cursor = db.cursor()
        cursor.execute("SELECT max(ticket) FROM datos_incidencias2")
        myresult = cursor.fetchone()
        # Debe de haber una incidencia para poder tomar la referencia
        max_number = myresult[0] + 1
        no_ticket = max_number"""

    entrada_ticket = Label(frame2, text=no_ticket, font=("times", 13))
    entrada_ticket.grid(row=13, column=1, sticky=W, pady=2)

    scrollbar = tkinter.Scrollbar(frame2, orient=tkinter.HORIZONTAL)
    scrollbar.grid(row=21, column=1)
    scrollbarv = tkinter.Scrollbar(frame2, orient=tkinter.VERTICAL)
    scrollbarv.grid(row=20, column=2, sticky=E)

    entrada_txt = tkinter.Text(frame2, wrap="none", xscrollcommand=scrollbar.set, yscrollcommand=scrollbarv.set,
                               width=33, relief=SUNKEN, height=4)
    entrada_txt.grid(row=20, column=1)

    scrollbar.config(command=entrada_txt.xview)
    scrollbarv.config(command=entrada_txt.yview)

    global entrada_ccs, entrada_spacecraft, var_spacecraft, variable_a, variable_b, variable_c, variable_d, \
        optionmenu_b, optionmenu_c, optionmenu_d, var_ccs, optionmenu_a

    var_ccs = tkinter.StringVar(root)
    var_ccs.set('')
    opc_ccs = ['Iztapalapa', 'Hermosillo']
    entrada_ccs = tkinter.OptionMenu(frame2, var_ccs, *opc_ccs)
    entrada_ccs.grid(row=15, column=1, sticky=W, pady=2)

    var_spacecraft = tkinter.StringVar()
    var_spacecraft.set('')
    opc_spacecraft = ['MX2', 'MX3']
    entrada_spacecraft = tkinter.OptionMenu(frame2, var_spacecraft, *opc_spacecraft)
    entrada_spacecraft.grid(row=14, column=1, sticky=W, pady=2)

    variable_a = StringVar()
    variable_b = StringVar()
    variable_c = StringVar()
    variable_d = StringVar()

    optionmenu_a = OptionMenu(frame2, variable_a, *data.keys())
    optionmenu_a.config(width=32)
    optionmenu_b = OptionMenu(frame2, variable_b, '')
    optionmenu_b.config(width=32)
    optionmenu_c = OptionMenu(frame2, variable_c, '')
    optionmenu_c.config(width=32)
    optionmenu_d = OptionMenu(frame2, variable_d, '')
    optionmenu_d.config(width=32)

    variable_a.trace('w', update_options_B)
    variable_b.trace('w', update_options_C)
    variable_c.trace('w', update_options_D)

    variable_a.set('')
    variable_b.set('')
    variable_c.set('')
    variable_d.set('')

    optionmenu_a.grid(row=16, column=1, sticky=W, pady=2)
    optionmenu_b.grid(row=17, column=1, sticky=W, pady=2)
    optionmenu_c.grid(row=18, column=1, sticky=W, pady=2)
    optionmenu_d.grid(row=19, column=1, sticky=W, pady=2)
    times()
    root.protocol("WM_DELETE_WINDOW", handleProtocol)
    Button(frame3, text="Registrar", width=10, command=registro_incidencia).grid(row=25,
                                                                                 column=0)  # BOTÓN "Registrarse"
    # Frame(root, height=24, width=400, bg='red').grid(row=14, column=2)


# VENTANA DE "Contraseña incorrecta".
def no_clave():
    global ventana_no_clave
    ventana_no_clave = Toplevel(ventana_login)
    ventana_no_clave.title("ERROR")
    ventana_no_clave.geometry("150x100")
    Label(ventana_no_clave, text="Contraseña incorrecta ").pack()
    Button(ventana_no_clave, text="OK", command=borrar_no_clave).pack()  # EJECUTA "borrar_no_clave()".


# VENTANA DE "Usuario no encontrado".
def no_usuario():
    global ventana_no_usuario
    ventana_no_usuario = Toplevel(ventana_login)
    ventana_no_usuario.title("ERROR")
    ventana_no_usuario.geometry("150x100")
    Label(ventana_no_usuario, text="Usuario no encontrado").pack()
    Button(ventana_no_usuario, text="OK", command=borrar_no_usuario).pack()  # EJECUTA "borrar_no_usuario()"


def times():
    clock = Label(frame3, font=("times", 20, "bold"))
    clock.grid(row=21, column=0, pady=0, padx=0)
    current_time = time.strftime("%H:%M:%S", time.gmtime())
    clock.config(text=current_time, font="Arial 15 bold")
    clock.after(200, times)


def times2():
    clock = Label(seguimiento_win, font=("times", 20, "bold"))
    clock.grid(row=12, column=2, pady=0, padx=0)
    current_time = time.strftime("%H:%M:%S", time.gmtime())
    clock.config(text=current_time, font="Arial 15 bold")
    clock.after(200, times2)


def update_options_B(*args):
    try:
        countries = data[variable_a.get()]
        variable_b.set(countries[0])
        menu = optionmenu_b['menu']
        menu.delete(0, 'end')
        for country in countries:
            menu.add_command(label=country, command=lambda nation=country: variable_b.set(nation))
    except Exception as e:
        print(e)


def update_options_F(*args):
    try:
        componentess = data4[variable_e.get()]
        # variable_f.set(componentess[0])
        menu = optionmenu_f['menu']
        menu.delete(0, "end")
        for comp in componentess:
            menu.add_command(label=comp, command=lambda nation=comp: variable_f.set(nation))
    except Exception as e:
        print(e)


def update_options_F1(*args):
    try:
        componentess = data4[variable_e1.get()]
        # variable_f.set(componentess[0])
        menu = optionmenu_f1['menu']
        menu.delete(0, "end")
        for comp in componentess:
            menu.add_command(label=comp, command=lambda nation=comp: variable_f1.set(nation))
    except Exception as e:
        print(e)


def update_options_C(*args):
    try:
        cities = data2[variable_b.get()]
        variable_c.set(cities[0])
        menu = optionmenu_c['menu']
        menu.delete(0, "end")
        for city in cities:
            menu.add_command(label=city, command=lambda nation=city: variable_c.set(nation))
    except Exception as e:
        print(e)


def update_options_D(*args):
    try:
        componentes = data3[variable_c.get()]
        variable_d.set(componentes[0])
        menu = optionmenu_d['menu']
        menu.delete(0, "end")
        for comp in componentes:
            menu.add_command(label=comp, command=lambda nation=comp: variable_d.set(nation))
    except Exception as e:
        print(e)


def borrar_ventana():
    try:
        ventana_ticket_ok.state(newstate='withdraw')
        ventana_decision.state(newstate='normal')
        ventana_decision.deiconify()
    except Exception as e:
        pass


def registro_incidencia2():
    global datos, lastid1, lastid2, lastid3, lastid4, lastid5, lastid6, lastid7, lastid8, lastid9, lastid10

    if (archivo_abierto == ""):
        archivo_abierto == "sin archivo adjunto"
        lastid1 = ""
    else:
        try:
            first = archivo_abierto.split("/")  # separa el path
            lastid1 = first.pop()  # extrae el nombre del archivo
            print(lastid1)
        except Exception as e:
            print(e)

    if (archivo_abierto2 == ""):
        archivo_abierto2 == "sin archivo adjunto"
        lastid2 = ""
    else:
        try:
            second = archivo_abierto2.split("/")  # separa el path
            lastid2 = second.pop()  # extrae el nombre del archivo
            print(lastid2)
        except Exception as e:
            print(e)

    if (archivo_abierto3 == ""):
        archivo_abierto3 == "sin archivo adjunto"
        lastid3 = ""
    else:
        try:
            three = archivo_abierto3.split("/")  # separa el path
            lastid3 = three.pop()  # extrae el nombre del archivo
        except Exception as e:
            print(e)

    if (archivo_abierto4 == ""):
        archivo_abierto4 == "sin archivo adjunto"
        lastid4 = ""
    else:
        try:
            four = archivo_abierto4.split("/")  # arreglo de palabras separadas
            lastid4 = four.pop()  # Nombre del archivo
        except Exception as e:
            print(e)

    if (archivo_abierto5 == ""):
        archivo_abierto5 == "sin archivo adjunto"
        lastid5 = ""
    else:
        try:
            five = archivo_abierto5.split("/")
            lastid5 = five.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto6 == ""):
        archivo_abierto6 == "sin archivo adjunto"
        lastid6 = ""
    else:
        try:
            six = archivo_abierto6.split("/")
            lastid6 = six.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto7 == ""):
        archivo_abierto7 == "sin archivo adjunto"
        lastid7 = ""
    else:
        try:
            seven = archivo_abierto7.split("/")  # arreglo de palabras separadas
            lastid7 = seven.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto8 == ""):
        archivo_abierto8 == "sin archivo adjunto"
        lastid8 = ""
    else:
        try:
            eigth = archivo_abierto8.split("/")
            lastid8 = eigth.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto9 == ""):
        archivo_abierto9 == "sin archivo adjunto"
        lastid9 = ""
    else:
        try:
            nine = archivo_abierto9.split("/")
            lastid9 = nine.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto10 == ""):
        archivo_abierto10 == "sin archivo adjunto"
        lastid10 = ""
    else:
        try:
            ten = archivo_abierto10.split("/")
            lastid10 = ten.pop()
        except Exception as e:
            print(e)

        #en Linux:  path = "/home/sistemas/Downloads
        name_file = "incidencia No. "

        try:  # envía archivo_abierto (Complete path), genera una carpeta y coloca el archivo
    #       os.system(
    #            "scp " + archivo_abierto + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid1)
            os.system("scp " + archivo_abierto + " lalo@192.168.1.110:\\Users\\Administrator\\Downloads\\"+ lastid1)
# Para Hosts en l amisma red o dominio
        except Exception as e:
            print(e)
            try:
                os.system("copy " + archivo_abierto + " \\10.0.2.4\\c$\\incidencia_no_")
            except Exception as e:
                print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto2 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid2)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto3 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid3)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto4 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid4)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto5 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid5)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto6 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid6)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto7 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid7)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto8 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid8)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto9 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid9)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system(
    #            "scp " + archivo_abierto10 + " sistemas@192.168.9.69:" + path + "/" + name_file + str(no_ticket) + "/" + lastid10)
    #    except Exception as e:
    #        print(e)

    datos_ticket = str(no_ticket)  # imprime el valor de ticket que le pasamos en la tabla de registro
    datos_operador = user_name
    datos_spacecraft = var_spacecraft.get()
    datos_ccs = var_ccs.get()
    datos_tfalla = variable_a.get()
    datos_componente = variable_b.get()
    datos_componente2 = variable_c.get()
    datos_device = variable_d.get()
    datos_descripcion = entrada_txt.get("1.0", 'end-1c')
    datos_date = now.strftime("%Y-%m-%d")
    current_time2 = time.strftime("%H:%M:%S")
    # registramos la nueva incidencia en la tabla donde vienen todas las incidencias

    stringg = "ticket_no_"  # Prefijo del nombre de la tabla
    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479",
                                      database="mydb")  # Conectmydb
    mycursor = mysqldb.cursor()  # nos posicionamos en la base de datos
    ticket_enter = entrada_ticket.get()

    try:
        mycursor.execute(
            "INSERT INTO " + stringg + ticket_enter + " VALUES(" + str(0) + ", 'Abierto', '" + datos_operador
            + "', '" + datos_spacecraft + "', '" + datos_ccs + "', '" + datos_tfalla + "', '" + datos_componente + "', '" + datos_componente2 + "', '"
            + datos_device + "', '" + datos_descripcion + "', '" + datos_date + "', '" + current_time2 + "', '" + lastid1 + "', '" + lastid2 + "', '" + lastid3 + "', '" + lastid4 + "', '" + lastid5 + "', '" + lastid6 + "', '" + lastid7 + "', '" + lastid8 + "', '" + lastid9 + "', '" + lastid10 + "')")
    except Exception as e:
        print(e)

    mysqldb.commit()  # Actualizamos al momento la bdd para ver reflejados los cambios instantáneamente

    label_succes = Label(seguimiento_win,
                         text="Resgistro Exitoso")  # En caso de ser un registro exitoso, se manda este mensaje
    label_succes.grid(row=17, column=2, sticky=W, pady=2)
    session.commit()
    session.close()
    seguimiento_win.state(newstate='withdraw')
    global ventana_ticket_ok
    ventana_ticket_ok = Tk()
    ventana_ticket_ok.title("Informe")
    ventana_ticket_ok.geometry("200x150")
    Label(ventana_ticket_ok, text="Incidencia agregada correctamente").pack()
    Button(ventana_ticket_ok, text="OK", command=borrar_ventana).pack()


def registro_incidencia():
    global datos, lastid1, lastid2, lastid3, lastid4, lastid5, lastid6, lastid7, lastid8, lastid9, lastid10

    if (archivo_abierto == ""):
        archivo_abierto == "sin archivo adjunto"
        lastid1 = ""
    else:
        try:
            first = archivo_abierto.split("/")  # separa el path
            lastid1 = first.pop()  # extrae el nombre del archivo
            print(lastid1)
        except Exception as e:
            print(e)

    if (archivo_abierto2 == ""):
        archivo_abierto2 == "sin archivo adjunto"
        lastid2 = ""
    else:
        try:
            second = archivo_abierto2.split("/")  # separa el path
            lastid2 = second.pop()  # extrae el nombre del archivo
            print(lastid2)
        except Exception as e:
            print(e)

    if (archivo_abierto3 == ""):
        archivo_abierto3 == "sin archivo adjunto"
        lastid3 = ""
    else:
        try:
            three = archivo_abierto3.split("/")  # separa el path
            lastid3 = three.pop()  # extrae el nombre del archivo
        except Exception as e:
            print(e)

    if (archivo_abierto4 == ""):
        archivo_abierto4 == "sin archivo adjunto"
        lastid4 = ""
    else:
        try:
            four = archivo_abierto4.split("/")  # arreglo de palabras separadas
            lastid4 = four.pop()  # Nombre del archivo
        except Exception as e:
            print(e)

    if (archivo_abierto5 == ""):
        archivo_abierto5 == "sin archivo adjunto"
        lastid5 = ""
    else:
        try:
            five = archivo_abierto5.split("/")
            lastid5 = five.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto6 == ""):
        archivo_abierto6 == "sin archivo adjunto"
        lastid6 = ""
    else:
        try:
            six = archivo_abierto6.split("/")
            lastid6 = six.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto7 == ""):
        archivo_abierto7 == "sin archivo adjunto"
        lastid7 = ""
    else:
        try:
            seven = archivo_abierto7.split("/")  # arreglo de palabras separadas
            lastid7 = seven.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto8 == ""):
        archivo_abierto8 == "sin archivo adjunto"
        lastid8 = ""
    else:
        try:
            eigth = archivo_abierto8.split("/")
            lastid8 = eigth.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto9 == ""):
        archivo_abierto9 == "sin archivo adjunto"
        lastid9 = ""
    else:
        try:
            nine = archivo_abierto9.split("/")
            lastid9 = nine.pop()
        except Exception as e:
            print(e)

    if (archivo_abierto10 == ""):
        archivo_abierto10 == "sin archivo adjunto"
        lastid10 = ""
    else:
        try:
            ten = archivo_abierto10.split("/")
            lastid10 = ten.pop()
        except Exception as e:
            print(e)

    path = "/home/sistemas/Downloads"
    name_file = "incidencia No. "

    #    try: #envía archivo_abierto (Complete path), genera una carpeta y coloca el archivo
    #        os.system("scp "+archivo_abierto+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid1)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto2+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid2)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto3+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid3)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto4+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid4)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto5+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid5)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto6+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid6)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto7+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid7)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto8+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid8)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto9+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid9)
    #    except Exception as e:
    #        print(e)
    #    try:
    #        os.system("scp "+archivo_abierto10+" sistemas@192.168.9.69:"+path+"/"+name_file+str(no_ticket)+"/"+lastid10)
    #    except Exception as e:
    #       print(e)

    datos_ticket = str(no_ticket)  # imprime el valor de ticket que le pasamos en la tabla de registro
    print(datos_ticket)

    datos_operador = user_name
    datos_spacecraft = var_spacecraft.get()
    datos_ccs = var_ccs.get()
    datos_tfalla = variable_a.get()
    datos_componente = variable_b.get()
    datos_componente2 = variable_c.get()
    datos_device = variable_d.get()
    datos_descripcion = entrada_txt.get("1.0", 'end-1c')

    datos_date = now.strftime("%Y-%m-%d")
    current_time2 = time.strftime("%H:%M:%S")
    # registramos la nueva incidencia en la tabla donde vienen todas las incidencias
    new_user = Incidencias(status="Abierto", operador=datos_operador, spacecraft=datos_spacecraft, ccs=datos_ccs,
                           tipo_falla=datos_tfalla, componente=datos_componente, componente2=datos_componente2,
                           device=datos_device,
                           descripcion=datos_descripcion, date=datos_date, hora=current_time2, files=lastid1,
                           files2=lastid2,
                           files3=lastid3, files4=lastid4, files5=lastid5, files6=lastid6,
                           files7=lastid7, files8=lastid8, files9=lastid9, files10=lastid10)

    stringg = "ticket_no_"  # Prefijo del nombre de la tabla
    mysqldb = mysql.connector.connect(host="localhost", user="root", password="313218479",
                                      database="mydb")  # Conectmydb
    mycursor = mysqldb.cursor()  # nos posicionamos en la base de datos
    # A la par se crea la tabla que almacenará los históricos de la incidencias
    mycursor.execute(
        "Create table " + str(stringg) + str(datos_ticket) + " (registro INT NOT NULL AUTO_INCREMENT, status "
                                                             "VARCHAR(20), operador VARCHAR(50), spacecraft VARCHAR(15), ccs VARCHAR(13), tipo_falla VARCHAR(15), "
                                                             "componente VARCHAR(40), componente2 VARCHAR(30), device VARCHAR(60), descripcion VARCHAR(400), date Date, "
                                                             "hora Time, files VARCHAR(300), files2 VARCHAR(300), files3 VARCHAR(300), files4 VARCHAR(300), files5 VARCHAR(300),"
                                                             "files6 VARCHAR(300), files7 VARCHAR(300), files8 VARCHAR(300), files9 VARCHAR(300), files10 VARCHAR(300), PRIMARY "
                                                             "KEY (registro))")  # Ejecutamos CREATE para crear una tabla asociada a una incidencia

    # Esta primera inserción a la tabla recién generada debe hacerse de esta manera debido a que si declaramos una clase
    # o plantilla de una determinada tabla, bien podría aplicar para cualquier de las tablas generadas con la peti-
    # ción de arriba, al tener cada una un nombre diferente no funcionaría ya que se le tendría que cambiar el nombre ala
    # clase o tener una clase por cada tabla, lo cuál no es nada conveniente. Entonces debemos decirle que agregue la inf
    mycursor.execute(
        "INSERT INTO " + str(stringg) + str(datos_ticket) + " VALUES(1, 'Abierto', '" + str(datos_operador) + "','"
        + str(datos_spacecraft) + "','" + str(datos_ccs) + "','" + str(datos_tfalla) + "','" + str(
            datos_componente) + "','" + str(datos_componente2)
        + "','" + str(datos_device) + "','" + str(datos_descripcion) + "','" + str(datos_date) + "','" + str(
            current_time2) + "','" +
        str(lastid1) + "','" + str(lastid2) + "','" + str(lastid3) + "','" + str(lastid4) + "','" +
        str(lastid5) + "','" + str(lastid6) + "','" + str(lastid7) + "','" + str(lastid8) + "','" +
        str(lastid9) + "','" + str(lastid10) + "')")
    mysqldb.commit()  # Actualizamos al momento la bdd para ver reflejados los cambios instantáneamente

    label_succes = Label(root, text="Resgistro Exitoso")  # En caso de ser un registro exitoso, se manda este mensaje
    label_succes.grid(row=17, column=2, sticky=W, pady=2)

    variable_a.set('')
    variable_b.set('')
    variable_c.set('')
    variable_d.set('')
    session.add(new_user)
    session.commit()
    session.close()
    root.state(newstate='withdraw')
    global ventana_ticket_ok
    ventana_ticket_ok = Tk()
    ventana_ticket_ok.title("Informe")
    ventana_ticket_ok.geometry("200x150")
    Label(ventana_ticket_ok, text="Incidencia agregada correctamente").pack()
    Button(ventana_ticket_ok, text="OK", command=borrar_ventana).pack()


################################################################################
def borrar_no_clave():
    ventana_no_clave.state(newstate='withdraw')


def borrar_no_match():
    no_match.state(newstate='withdraw')
    try:
        rooot.state(newstate='normal')
        rooot.deiconify()
    except Exception as e:
        ventana_viss.state(newstate='normal')
        ventana_viss.deiconify()


def borrar_no_ticket():
    ventana_no_ticket.state(newstate='withdraw')


def borrar_no_usuario():
    ventana_no_usuario.state(newstate='withdraw')


# Esta función se manda a llamar cuando se presiona el boton registrar en
# la ventana de registro, valida los datos y los agrega a la bdd
def registro_usuario():
    # obtener info a guardar en el archivo
    usuario_info = nombre_usuario.get()
    clave_info = clave.get()
    clave_info2 = clave2.get()
    ccs_info = datos1.get()
    dom_info = datos2.get()
    correo = mail.get()
    print(correo)

    usuario_sn_spaces = usuario_info.replace(" ", "")
    valida_nombre = usuario_sn_spaces.isalpha()  # True o False

    if valida_nombre == False:
        ventana_verifica2 = Toplevel(ventana_registro)
        ventana_verifica2.title("ERROR")
        ventana_verifica2.geometry("300x150")
        Label(ventana_verifica2, text="El nombre debe contener sólo letras").pack()

    else:
        if clave_info != clave_info2:  # Si las contraseñas son diferentes, arrojar excepción:
            global ventana_verifica
            ventana_verifica = Toplevel(ventana_registro)
            ventana_verifica.title("ERROR")
            ventana_verifica.geometry("300x150")
            Label(ventana_verifica, text="Las contraseñas no son iguales").pack()
            # Button(ventana_verifica, text="OK", command=borrar_no_clave).pack()
        else:
            file = open(usuario_info, "w")  # CREACION DE ARCHIVO
            file.write(usuario_info + "\n")  # nombre
            file.write(ccs_info + "\n")  # ccs
            file.write(dom_info + "\n")  # dom
            file.write(clave_info)
            file.close()
            entrada_clave2.delete(0, END)
            entrada_nombre.delete(0, END)
            entrada_clave.delete(0, END)
            ##############Insertar info en la bdd########################
            new_user = User(name=usuario_info, password=clave_info, ccs=ccs_info, dominio=dom_info, mail=correo)
            session.add(new_user)
            session.commit()
            session.close()
            Label(ventana_registro, text="Registro completado con éxito", font=("calibri", 11)).pack()


ventana_inicio()  # EJECUCIÓN DE LA VENTANA DE INICIO.
